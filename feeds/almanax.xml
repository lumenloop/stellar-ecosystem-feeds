<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
  <title type="text">Almanax</title>
  <link rel="alternate" type="text/html" href="https://www.almanax.ai/blog"/>
  <link rel="self" type="application/atom+xml" href="http://10.0.0.124:3044/?action=display&amp;bridge=CSSLostDateBridge&amp;home_page=https%3A%2F%2Fwww.almanax.ai%2Fblog&amp;url_selector=a.link-heading-blog&amp;url_pattern=%2Fpost%2F.*&amp;content_selector=.content+.rich-text-block&amp;content_cleanup=&amp;title_cleanup=&amp;date_selector=.subtitle&amp;date_format=F+j%2C+Y&amp;date_selector_index=&amp;author_selector=&amp;remove_styling=on&amp;remove_markup=on&amp;limit=3&amp;_cache_timeout=3600&amp;format=Atom"/>
  <icon>https://github.com/RSS-Bridge/rss-bridge/favicon.ico</icon>
  <logo>https://github.com/RSS-Bridge/rss-bridge/favicon.ico</logo>
  <id>http://10.0.0.124:3044/?action=display&amp;bridge=CSSLostDateBridge&amp;home_page=https%3A%2F%2Fwww.almanax.ai%2Fblog&amp;url_selector=a.link-heading-blog&amp;url_pattern=%2Fpost%2F.*&amp;content_selector=.content+.rich-text-block&amp;content_cleanup=&amp;title_cleanup=&amp;date_selector=.subtitle&amp;date_format=F+j%2C+Y&amp;date_selector_index=&amp;author_selector=&amp;remove_styling=on&amp;remove_markup=on&amp;limit=3&amp;_cache_timeout=3600&amp;format=Atom</id>
  <updated>2025-04-11T21:57:51+00:00</updated>
  <author>
    <name>RSS-Bridge</name>
  </author>
  <entry>
    <title type="html">Releasing ALMX-1.5 and the Web3 Security Atlas</title>
    <published>2025-03-26T21:57:51+00:00</published>
    <updated>2025-03-26T21:57:51+00:00</updated>
    <id>https://www.almanax.ai/post/releasing-almx-1-5-and-the-web3-security-atlas</id>
    <link rel="alternate" type="text/html" href="https://www.almanax.ai/post/releasing-almx-1-5-and-the-web3-security-atlas"/>
    <content type="html">Today we release the first version of the Web3 Security Atlas (W3SA), an open-source initiative led by Almanax aimed at improving Web3 security with AI. This first release includes a benchmarking suite for blockchain code vulnerabilities. It initially focuses on EVM smart contracts written in Solidity and Solana programs written in Rust, with a second launch planned for Stellar and Aptos smart contracts. A primary motivation for creating the Web3 Security Atlas is the need to overcome the limitations of current benchmark datasets. These are Solidity-specific, limited in size, often too simplistic and outdated. For instance, Smartbugs, a well-known curated benchmark, contains test cases that are overly simple and include verbal hints (like function names that indicate the vulnerability). They are appropriate for Static Analysis tool testing, but not recommended for other uses. The hints make them unsuitable for AI model testing, as the models can simply pick up on these cues, rather than learning to identify the underlying vulnerabilities.  Additionally, many of these datasets consist of toy examples, often comprising a single simple smart contract, which does not accurately represent the complexity found in real-world projects. Despite these limitations, we utilized these datasets for our initial benchmarking efforts and obtained state-of-the-art performance on both detection and false positive rates towards the end of 2024. ALMX-1, our first AI model, beat any other LLM model and static analysis tool at the task of identifying smart contract vulnerabilities. To address these limitations and take this effort to the next level, we take inspiration from the broader AI industry by adopting benchmarking practices to the Web3 security field. Just as AI research relies on specialized and general-purpose benchmarks to rigorously assess model capabilities, we aim to establish benchmarks that reflect the real-world complexity of Web3 security vulnerabilities.We strived to create benchmarks with the following characteristics:Completeness: the data encompasses a broad spectrum of bug types with varying levels of severity. Realism: we utilize complete repositories of authentic, deployed, and audited codebases.The tools are compared against scanning the entire repositories, and not just single files. Robustness: we incorporate challenging examples to rigorously evaluate performance and accommodate advancements in AI models in the coming years. As an example, our Solidity codebase benchmark includes 92 Critical/High/Medium severity bugs, from 9 different bug categories, and distributed in 8 real world codebases containing hundreds of files.Data collection processWe assembled these benchmarks by gathering open source audit reports and corresponding repositories at the same commit hash. We manually review and refine datapoints to ensure high quality ground truths. Wherever necessary, we carefully inject bugs to increase the signal of the benchmark. At evaluation time, we measure the detection rate of different models. This metric is defined as the number of unique High or Medium severity findings that the tool caught. We compare this metric for base AI models (including O1, Claude, and GPT-4o), Static Analysis tools (Slither and Radar), and our new fine tuned model, ALMX-1.5. ALMX-1.5ALMX-1.5 is our most recent model release. It is a model designed to navigate large scale and complex repositories, to perform high effort reasoning across multi-file execution paths, while empowered with the ability to consult the project documentation and navigate the internet. It supports most commonly used programming languages.Our benchmarksWe are releasing 4 benchmarks to start:Solidity Codebase Benchmark: A real world-scale benchmark made of hard bugs and complex Solidity repositories. Solidity Access Control Benchmark: A set of test cases targeting access control bugs. Solana Codebase Benchmark: A real world-scale benchmark made of hard bugs and complex Solana Programs repositories. Solana Insecure Programs: A set of test cases targeting common Solana bugs. What’s Next:In the upcoming months, we will release similar benchmarks for the Stellar and Aptos ecosystems. Additionally, we plan to conduct a focused analysis on false positives rates, one of the most important metrics when benchmarking security tools.We thank Hypernative, TRM Labs, AnChain.AI, and the Stellar Development Foundation for their support in this effort to make Web3 more secure. Check out our HuggingFace page and reach out to us here to learn how Almanax can empower your security team. ‍</content>
    <link rel="enclosure" type="image/png" href="https://cdn.prod.website-files.com/67c7285e65ac70a47f2f899f/67e414f835716cc9074bf1c5_67d03a0a3b1a802974eebc0c_w3sa%20banner.png"/>
  </entry>
  <entry>
    <title type="html">From Smart Contracts to Supply Chains: How Almanax is Uncovering Hidden Threats in Code</title>
    <published>2025-03-31T21:57:51+00:00</published>
    <updated>2025-03-31T21:57:51+00:00</updated>
    <id>https://www.almanax.ai/post/from-smart-contracts-to-supply-chains-how-almanax-is-uncovering-hidden-threats-in-code</id>
    <link rel="alternate" type="text/html" href="https://www.almanax.ai/post/from-smart-contracts-to-supply-chains-how-almanax-is-uncovering-hidden-threats-in-code"/>
    <content type="html">TLDR: We’re in the middle of a software security arms race—hackers are adopting new tricks every day. As cyberattacks become more sophisticated, Almanax is leveraging LLMs to detect hidden threats in smart contracts and software supply chains once deemed impossible to catch.Critical Need for Security in Web3The PR team for Web3 is working overtime—the amount of hacks is enough for any crypto advocate to never touch their wallet again. The bigger the projects get, the more they become prime targets for sophisticated attacks, and with devastating consequences. Consider the Bybit hack, which cost victims $1.46 billion—a staggering figure and one of the most significant cyber heists of all time.How does an entire industry plagued with so many issues tackle this challenge? We need a layered approach. At Almanax, we developed an AI-powered security platform that scans for a wide array of vulnerabilities in the most common smart contract languages (Solidity, Rust, and Move). Traditional tools like static analysis often drop the ball on logic bugs once deemed machine unauditable (Demystifying Exploitable Bugs in Smart Contracts), but Almanax is stepping in to catch even the subtlest business logic flaws.Some examples of vulnerability types Almanax is finding:  Access Control ReentrancyLogic BugsIncorrect Business Logic Flash Loan ExploitsUnchecked Delegate Calls &amp;amp; Proxy RisksOracle Manipulation Overflows Time Manipulation &amp;amp; Randomness IssuesBug Spotlight in FarcasterWalletOptimisticVerifierBy leveraging LLMs, Almanax excels at catching issues like the one discovered in this recent Cantina competition for Farcaster Attestation (lines 260–271).Can you spot the bug?Link to code: 260-271 in FarcasterWalletOptimisticVerifier.solBug BreakdownHere, the contract calculates a final payout by taking the total balance, subtracting the deposit amount, and adding the reward amount. In certain scenarios, this calculation can demand more ETH than the contract really holds—or, if the balance is high enough, it can overpay and let an attacker withdraw more than they deserve.Issue is in the calculationreward = address(this).balance - depositAmount + challengeRewardAmount;When the calculated payout exceeds the total balance, the transfer cannot be completed. In Ethereum, any attempt to send more ETH than available will fail (revert). Because of this, the contract completely halts the challenge flow. Legitimate challengers are then blocked from receiving any reward. This effectively locks the challenge mechanism in a denial-of-service state.Suppose the contract has 3 ETH in total. The deposit amount required is 1 ETH, and the intended reward is 1.5 ETH. Instead of simply sending out 1.5 ETH, the contract calculates:3 ETH (balance) - 1 ETH (deposit) + 1.5 ETH (reward) = 3.5 ETHBut the contract only holds 3 ETH. It tries to send 3.5 ETH, which it doesn’t have, and the transfer reverts, blocking any payout.Conversely, if the contract does have enough ETH to cover the inflated payout, the same buggy formula lets an attacker remove a larger amount than intended. By artificially increasing the contract’s balance (for instance, depositing extra ETH first), the attacker can exploit the calculation to siphon off an inflated challenge reward. Over multiple challenges, this can drain a significant portion of the contract.In the provided example, Almanax not only classifies issues by severity (Critical, High, Medium, Low) but also explains the root cause, making it far easier to remediate. If the protocol had scanned their repository with Almanax, the scan would have flagged this logical oversight as a critical vulnerability—issue solved.Case Study: The Go Ecosystem Typosquatting AttackBut Almanax’s vision is to move beyond smart contracts. While smart contracts are the epicenter of catastrophic exploits, the software supply chain presents an equally dangerous vector. A single compromised third-party dependency can lead to devastating outcomes across multiple projects.This infamous typosquatting attack (typosquatting: registering names nearly identical to legitimate ones to deceive developers) on the Go ecosystem mimicked the popular BoltDB module to distribute a backdoor. This malicious package could have led to widespread system compromise, data exfiltration, and persistent access for attackers. Details of the AttackReal package: https://github.com/boltdb/boltMalicious package: github.com/boltdb-go/bolt (note the -go difference)Security researchers discovered a malicious typosquat package in the Go ecosystem.The malicious package contained a backdoor enabling remote code execution (RCE).Once cached by Go Module Proxy, the attacker altered GitHub tags to point to a clean version, hiding evidence of malicious code.Developers installing the package via go get unknowingly retrieved the cached malicious version, rather than the clean one.The malware connected to a remote command-and-control (C2) server (49.12.198[.]231:20022); executing arbitrary commands, enabling full remote access.The malicious package remained undetected for over three years.The attack&amp;#x27;s ability to remain undetected for years highlights the dangers of vulnerabilities lurking in everyday systems. Similar incidents have been observed in other ecosystems, such as npm and PyPI, where attackers have leveraged slight variations in package names to trick developers into installing compromised software. Similar to the logical bug discussed earlier, if an organization had scanned their dependencies with Almanax, they would have caught this major issue.Almanax scan results for the malicious Go packageLooking Beyond Smart Contracts: LLMs and the Future of Security ScanningLarge language models are already showing promising versatility in code analysis. Whether it’s EVM-based smart contracts or conventional software in Go or Rust, LLMs can understand syntax, semantics, and even context-sensitive business logic.Holistic Analysis: LLMs can now identify complex logic bugs beyond classic vulnerability templates.Automated Workflow: Almanax integrates with security pipelines for continuous monitoring of both source code and dependencies.Evolving Capabilities: As hackers grow more sophisticated, LLMs can continuously improve, helping organizations detect new exploit tactics. In a not-so-distant future, we’ll be able to unleash AI agents to go “think” for long periods of time and identify zero-day vulnerabilities - complex security issues no one was aware existed. What’s Next for AlmanaxCross-Platform Scans: Beyond EVM protocols, Almanax has already expanded support to Go, Rust, Move, and many other popular programming languages.One-Click Dependency Checks: Soon, users will be able to scan their full dependency list and receive immediate security alerts.Enterprise Integration: The platform plugs directly into existing security workflows (i.e. CICD), providing actionable insights without the overhead of writing specific detectors.As attacks grow more elaborate and costly, investing in robust, AI-driven security is becoming a necessity—not a luxury. Hidden malware and logic vulnerabilities still lurk in today’s repositories, waiting to be discovered.Follow us on Twitter and LinkedIn, and check out Almanax to stay ahead of emerging threats.‍</content>
    <link rel="enclosure" type="image/png" href="https://cdn.prod.website-files.com/67c7285e65ac70a47f2f899f/67e414b30dc69683fcf2966b_67c72d624a7d3850ec3d5bfa_Screenshot%202025-03-04%20at%2011.41.52%E2%80%AFAM.png"/>
  </entry>
  <entry>
    <title type="html">Cybersecurity Trends</title>
    <published>2025-03-13T21:57:51+00:00</published>
    <updated>2025-03-13T21:57:51+00:00</updated>
    <id>https://www.almanax.ai/post/cybersecurity-trends</id>
    <link rel="alternate" type="text/html" href="https://www.almanax.ai/post/cybersecurity-trends"/>
    <content type="html">Over the past 20 years, we’ve seen companies shifting from DevOps practices to DevSecOps, with an ever-increasing focus on integrating security tools and practices in the development process - what’s often referred to as “shifting left”. This involved procedures like adding static analysis tools (SASTs) into CI/CD pipelines, monitoring for insecure dependencies, scanning container images, using dynamic analysis tools (DASTs) to simulate the behavior of an app in production, and more broadly an increase in time and resources spent on testing before anything is pushed to production.The blockchain industry has often prioritized speed over security, outsourcing most of the security testing to external auditors. The many high-profile hacks and the $9B dollars stolen in the past 3 years have been a wake-up call for the industry to finally be more serious in their security practices. Bug bounties, audit redundancy (getting audited by multiple firms), and the use of static analysis tools like Slither have started to become the norm for projects launching onchain.In a world where money lives at the protocol level, a hacker can walk away with billions of dollars if a critical vulnerability is exploited, unlike a Web2 hack, which usually involves data theft that can be ransomed.We’re finally seeing a renaissance for blockchain security, which is making institutions starting to feel comfortable with being active players in this space. The Internet of the future will be a place where money can be exchanged globally and peer-to-peer in the same way an email is exchanged. Many crypto companies are building the infrastructure and the applications to bring this vision to reality, which will require us to have even stronger security practices and products. I recently came across a new architecture referred to as CyberDevOps proposed by Federico Lombardi, CISO at Conio. CyberDevOps brings an extreme shift left in security by integrating cybersecurity tools within a DevSecOps pipeline. It helped Conio fix up to 100% of known bugs and vulnerabilities and significantly improve their code quality. Here’s a visual comparison between DevOps, DevSecOps, and CyberDevOps taken from Federico’s paper: Images taken from the CyberDevOps paperI’m convinced that most mature companies will progressively adopt a similar framework. The key takeaway here is that security is a matter of how many layers of protection we’re putting between us and bad actors. Even if they pass the first and second layer, can we stop them at layer 3 or 4? This concept may be familiar to many of you and is usually referred to as the Swiss Cheese Model, also popular in the aerospace industry where I started my career.Image taken from WikipediaGoogle recently mentioned that 25% of all of their code is AI-generated. We’re headed into a future where that number is going to go up exponentially, and security teams will need to be equipped with proper tools to do their job, especially with AI coding assistants found to be the source of many errors in code. Popular static analyzers today are mostly rule-based and have shown clear limitations in identifying logical bugs, given how hard it is to write rules for every possible type of vulnerability. When it comes to code security, the path forward to detect machine unauditable bugs and protect our critical infrastructure points to AI models specialized in security.Today, bad actors are already using LLMs to facilitate their hacks. Security is a cat and mouse game and both companies and governments will need to respond to increasingly frequent and effective attacks with more powerful tools. It’s a matter of national security and Almanax is proud to be building in this space. The first product we brought to market is a vulnerability scanner and SAST that uses a custom-trained, AI agentic pipeline to identify code vulnerabilities in a codebase. It already demonstrated its value by identifying code issues missed by human developers and security auditors, which could have otherwise been exploited by bad actors with significant monetary losses. We were awarded multiple bug bounty rewards for these discoveries from different blockchain companies and Vitalik Buterin himself. Dependency scanning, integration and unit tests, and DASTs are areas where LLMs have also proven effective in increasing detection rates and decreasing the high number of false positives, often big pain points for security teams who need to sort through hundreds of alerts on a daily basis. Our internal experiments showed promising results in using LLMs to filter out false positives from these alerts, regardless of whether we are generating them or they are coming from other tools. Our vision is to build an AI Security Engineer that can assist developers and security teams in all their day-to-day operations to extinguish software exploits. It’s an exciting time to be operating in this space.Francesco Piccoli</content>
    <link rel="enclosure" type="image/png" href="https://cdn.prod.website-files.com/67c7285e65ac70a47f2f899f/67c7285e65ac70a47f2f8a84_the%20evolution%20of%20cybersecurity.png"/>
  </entry>
</feed>
