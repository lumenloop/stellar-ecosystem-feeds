<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
  <title type="text">xyclooLabs Blog</title>
  <link rel="alternate" type="text/html" href="https://blog.xycloo.com/blog"/>
  <link rel="self" type="application/atom+xml" href="http://10.0.0.124:3044/?action=display&amp;bridge=CssSelectorFeedExpanderBridge&amp;feed=https%3A%2F%2Fblog.xycloo.com%2Ffeed.xml&amp;content_selector=.prose&amp;content_cleanup=&amp;remove_styles=on&amp;limit=3&amp;format=Atom"/>
  <icon>https://github.com/RSS-Bridge/rss-bridge/favicon.ico</icon>
  <logo>https://github.com/RSS-Bridge/rss-bridge/favicon.ico</logo>
  <id>http://10.0.0.124:3044/?action=display&amp;bridge=CssSelectorFeedExpanderBridge&amp;feed=https%3A%2F%2Fblog.xycloo.com%2Ffeed.xml&amp;content_selector=.prose&amp;content_cleanup=&amp;remove_styles=on&amp;limit=3&amp;format=Atom</id>
  <updated>2025-04-11T22:07:45+00:00</updated>
  <author>
    <name>RSS-Bridge</name>
  </author>
  <entry>
    <title type="html">Stellar Smart Accounts, Mercury and Blend: Building a DeFi Bot.</title>
    <published>2024-08-14T00:00:00+00:00</published>
    <updated>2024-08-14T00:00:00+00:00</updated>
    <id>https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts</id>
    <link rel="alternate" type="text/html" href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts"/>
    <author>
      <name>hello@xycloo.com (xyclooLabs team)</name>
    </author>
    <content type="html">&lt;div class="prose max-w-none pb-8 pt-10 dark:prose-invert"&gt;&lt;img src="https://blog.xycloo.com/static/images/onchain-bots-post.png"/&gt;&lt;p&gt;Bots and on-chain automation are essential components of any DeFi ecosystem, enabling you to monitor positions and take necessary actions like rebalancing and participating in auctions. However, building and deploying complex workflows in this space can be challenging, especially when they require access to historical data, ledger information, and real-time execution.&lt;/p&gt;&lt;p&gt;Mercury simplifies these challenges by offering a platform for creating workflows that leverage network data. With a suite of utilities, abstractions, and infrastructure features, Mercury streamlines the development process. This is largely due to the ZephyrVM, the virtual machine powering Mercury&amp;#x27;s cloud environment, which is specifically designed for handling these types of tasks. You can learn more about Mercury and Zephyr we recommend checking out the &lt;a target="_blank" rel="noopener noreferrer" href="https://mercurydata.app/blog/blend-bot-with-zephyr-and-smart-accounts"&gt;website&lt;/a&gt; or the &lt;a target="_blank" rel="noopener noreferrer" href="https://docs.mercurydata.app/blog/blend-bot-with-zephyr-and-smart-accounts"&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In this post we&amp;#x27;ll explore a few things:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;What stellar smart account are&lt;/li&gt;&lt;li&gt;Why they are perfect for building DeFi on-chain cloud actions.&lt;/li&gt;&lt;li&gt;How to create a simple smart account to this purpose.&lt;/li&gt;&lt;li&gt;How to interact with protocols (Blend in this case) with the smart account. This section specifically will walk you through all of the nuances of working with smart accounts and how to submit transactions with custom auth that actually get accepted by the network, one of the sections we feel there is more lack of documentation.&lt;/li&gt;&lt;li&gt;Writing a Zephyr program that supplies XLM when there is a new USDC borrow. &lt;strong&gt;Note that this strategy is purposefully not proficient and it&amp;#x27;s just a way of showing how to build on-chain actions with Zephyr&lt;/strong&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;hr/&gt;&lt;h1 id="what-are-smart-accounts-on-stellar"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#what-are-smart-accounts-on-stellar" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;What are smart accounts on Stellar?&lt;/h1&gt;&lt;p&gt;Smart accounts are smart contracts that act as a wallet which however lives on chain and has its own set of rules defined in its own code. Of course, since the wallet still needs to be controlled by some kind of autority in order for the owner to use its funds/identity, the smart account needs to somehow authenticate and authorize operations. But before we dive into that, let&amp;#x27;s take a closer look at Stellar&amp;#x27;s auth.&lt;/p&gt;&lt;p&gt;Simply put, in Stellar we have two kinds of authorization, one that is designed to authorize Soroban actions and one that is for authorizing Stellar transactions and classic operations. Within soroban authentication, we need to distinguish between stellar accounts and smart contracts.&lt;/p&gt;&lt;p&gt;A general rule of thumb is that stellar accounts authorize soroban actions by signing the hash of the auth stack generated by the soroban auth framework during simulation (or that you can manually build), while smart contracts inherently grant their authorization to the contracts they directly invoke, or they can specify in-code deeper authorizations.&lt;/p&gt;&lt;p&gt;Now, back to &lt;em&gt;&amp;quot;the smart account needs to somehow authenticate and authorize operations&amp;quot;&lt;/em&gt;. Since the Soroban VM (SVM) has native support for account abstraction this process becomes much easier and doesn&amp;#x27;t involve really any complex logic. The soroban auth framework enables smart contracts to use the reserved and non-externally-callable &lt;code&gt;__check_auth()&lt;/code&gt; function to define the logic to follow when the smart contract&amp;#x27;s authorization to perform a certain operation is required. Since we can define our own auth logic within a contract, and due to the SVM abstracting accounts and contracts into the generic &lt;code&gt;Address&lt;/code&gt; type we effectively end up with a &amp;quot;chain-controlled&amp;quot; account (chain-controlled because the auth logic is on-chain).&lt;/p&gt;&lt;p&gt;This means we can easily setup multi-sig accounts, passkey-powered accounts, or even just a single master signer-controlled account with extra security measures (e.g a timelock before a transfer). This is all incredibly cool and simple to setup on Stellar, but what does it have to do with Mercury and on-chain actions?&lt;/p&gt;&lt;h1 id="why-use-smart-accounts-for-cloud-on-chain-actions"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#why-use-smart-accounts-for-cloud-on-chain-actions" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Why use smart accounts for cloud on-chain actions?&lt;/h1&gt;&lt;p&gt;When working with efficient on-chain actions, we either have two complications:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;We need to setup a server, run a node, build infrastructure to interact with it (getting real-time updates, reading the ledger, db connection setup and logic, etc). The advantage here is that you own the execution of the actions and can generally trust it with your secret key.&lt;/li&gt;&lt;li&gt;Rely on a fully-featured and customizable cloud infra service like Mercury&amp;#x27;s cloud execution environment, which keeps the very same efficiency of the above solution while abstracting away from the developer anything that doesn&amp;#x27;t strictly have to do with how the data is processed and when the action should be triggered. The downside here is that you don&amp;#x27;t own the execution, and while you may trust Xycloo as an organization, trusting it with your secret key is a completely different thing which &lt;strong&gt;we definitely don&amp;#x27;t encourage doing&lt;/strong&gt;!&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;However, since we now know that smart accounts can define both custom authentication and authorization as well, we can use this to our advantage. What about a smart wallet that enables one signer to only perform a limited set of operation under a set of conditions? Thanks to smart accounts this is possible and can perfectly blend in a cloud on-chain actions executor: you give the deployed code your special limited signer&amp;#x27;s secret, and your on-chain logic decides whether the signer&amp;#x27;s signature is valid or not depending on the performed action.&lt;/p&gt;&lt;p&gt;Onto a more practical example, let&amp;#x27;s assume that the possible on-chain actions we have defined in a Zephyr programs are monitoring a liquidity pool and automatically rebalancing our position based on historical performances and the current state. While incorrectly rebalancing a pool can surely lead to some impermanent loss, it&amp;#x27;s surely a much more underprivileged action than withdrawing the funds to a different wallet for instance. Using the &lt;code&gt;__check_auth()&lt;/code&gt; function we can thus setup a signer to only be able to rebalance a certain pool and by a certain limited price range and then provide the signer&amp;#x27;s secret to our Zephyr program.&lt;/p&gt;&lt;p&gt;We will end up with an efficient bot built and deployed with ease on the cloud, while having the guarantee that in case Mercury got critically hacked and the signer&amp;#x27;s secre leaked the worst that can happen is a slighly incorrectly balanced lp position (and later on also remove that rogue signer).&lt;/p&gt;&lt;p&gt;In our opinion, this is a game changer that combined with the efficiency and developer experience of the Mercury Cloud environment can lead to safe and efficient DeFi portfolio management services.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note that Zephyr programs can potentially also be self-hosted since the VM is open-source!&lt;/p&gt;&lt;/blockquote&gt;&lt;hr/&gt;&lt;h1 id="defining-a-meaningless-strategy"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#defining-a-meaningless-strategy" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Defining a (meaningless) strategy.&lt;/h1&gt;&lt;p&gt;Before we setup anything we need to understand which on-chain action we want to perform. As I mentioned, for the scope of this post we will be choosing a strategy that is purposefully non profitable. Mainly, we will monitor for USDC borrows to happen on a blend pool and when these happen supply XLM.&lt;/p&gt;&lt;h1 id="defining-our-custom-auth"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#defining-our-custom-auth" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Defining our custom auth.&lt;/h1&gt;&lt;p&gt;What we&amp;#x27;re targeting is enabling a single ed25519 signer to be able to perform a &lt;code&gt;submit&lt;/code&gt; operation on Blend&amp;#x27;s testnet fixed usdc-xlm pool. Note that the authorization scheme I will use below is not safe. A comprehensive check would inspect also the remaining auth contexts and the arguments of the &lt;code&gt;submit&lt;/code&gt; function as well. But since defining a standard for authorizing on-chain actions depending on the auth context stack is not in the scope of the article, we&amp;#x27;ll just use a simple and authorization-wise unsafe check:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[contracttype]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[derive(Clone)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;struct&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;Signature&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; public_key&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; signature&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;64&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[contractimpl]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;impl&lt;/span&gt; &lt;span class="token class-name"&gt;CustomAccountInterface&lt;/span&gt; &lt;span class="token keyword"&gt;for&lt;/span&gt; &lt;span class="token class-name"&gt;AccountContract&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;type&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;Signature&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;Signature&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;type&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;Error&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;AccError&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token attr-name attribute"&gt;#[allow(non_snake_case)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;__check_auth&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        env&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Env&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        signature_payload&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Hash&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        signature&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Signature&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        auth_contexts&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Vec&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;Context&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="token class-name"&gt;Result&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;AccError&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token function"&gt;authenticate&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;signature_payload&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;signature&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token operator"&gt;?&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token comment"&gt;// Note that this is actually unsafe and should generally not be used&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token comment"&gt;// in production. A valid signer could include the Blend submit operation&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token comment"&gt;// as part of the call stack but perform other malicious operations too.&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; result &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;Err&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;AccError&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;InvalidContext&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;         &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;for&lt;/span&gt; context &lt;span class="token keyword"&gt;in&lt;/span&gt; auth_contexts&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;iter&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token keyword"&gt;match&lt;/span&gt; context &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token class-name"&gt;Context&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Contract&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;c&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token keyword"&gt;if&lt;/span&gt; c&lt;span class="token punctuation"&gt;.&lt;/span&gt;fn_name &lt;span class="token operator"&gt;==&lt;/span&gt; &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                        &lt;span class="token operator"&gt;&amp;amp;&amp;amp;&lt;/span&gt; c&lt;span class="token punctuation"&gt;.&lt;/span&gt;contract &lt;span class="token operator"&gt;==&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;storage&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;instance&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;get&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;DataKey&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;BlendPool&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                        result &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;Ok&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                _ &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        result &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that here &lt;code&gt;authenticate(&amp;amp;env, &amp;amp;signature_payload, &amp;amp;signature)&lt;/code&gt; verifies the validity of the signature that is provided to the Soroban auth framework and that it belongs to a signer that has the authorization we just discussed.&lt;/p&gt;&lt;h3 id="user-defined-signature"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#user-defined-signature" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;User-defined Signature&lt;/h3&gt;&lt;p&gt;Before we proceed with the full reference implementation, I want you to focus on the fact that the accepted &lt;code&gt;signature&lt;/code&gt; in &lt;code&gt;__check_auth&lt;/code&gt; is user-defined:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[contracttype]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[derive(Clone)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;struct&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;Signature&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; public_key&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; signature&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;64&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[contractimpl]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;impl&lt;/span&gt; &lt;span class="token class-name"&gt;CustomAccountInterface&lt;/span&gt; &lt;span class="token keyword"&gt;for&lt;/span&gt; &lt;span class="token class-name"&gt;AccountContract&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;type&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;Signature&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;Signature&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token attr-name attribute"&gt;#[allow(non_snake_case)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;__check_auth&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        env&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Env&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        signature_payload&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Hash&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        signature&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Signature&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        auth_contexts&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Vec&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;Context&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="token class-name"&gt;Result&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;AccError&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token comment"&gt;// ...&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Being able to use custom signatures is exactly what makes this all possible: depending on a signature object that acts as a proof, we need to be able to verify that the proof is tied to the &lt;code&gt;signature_payload&lt;/code&gt;, i.e the hash of the authorized call stack. This will all be clearer when we will actually invoke Blend&amp;#x27;s &lt;code&gt;submit&lt;/code&gt; function with as source our smart wallet, but it&amp;#x27;s a crucial concept to understand.&lt;/p&gt;&lt;p&gt;Here&amp;#x27;s a reference implementation of the whole contract, which should be extended to be actually used in any meaningful way by at least adding funcitonality to add and remove signers, withdraw funds etc:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#![no_std]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;use&lt;/span&gt; &lt;span class="token namespace"&gt;soroban_sdk&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token namespace"&gt;auth&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;span class="token class-name"&gt;Context&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;CustomAccountInterface&lt;/span&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    contract&lt;span class="token punctuation"&gt;,&lt;/span&gt; contracterror&lt;span class="token punctuation"&gt;,&lt;/span&gt; contractimpl&lt;span class="token punctuation"&gt;,&lt;/span&gt; contracttype&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token namespace"&gt;crypto&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;Hash&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;Address&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Env&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Vec&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[contract]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;struct&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;AccountContract&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[contracttype]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[derive(Clone)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;struct&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;Signature&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; public_key&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; signature&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;64&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[contracttype]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[derive(Clone)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;enum&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;DataKey&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;Signer&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;BlendPool&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[contracterror]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[repr(u32)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;enum&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;AccError&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;NotEnoughSigners&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;NegativeAmount&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;2&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;BadSignatureOrder&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;3&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;UnknownSigner&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;4&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;InvalidContext&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;5&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[contractimpl]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;impl&lt;/span&gt; &lt;span class="token class-name"&gt;AccountContract&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token comment"&gt;// Add other init params here.&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;init&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Env&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; signer&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; blend_pool&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Address&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;storage&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;instance&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;set&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;DataKey&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Signer&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;signer&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;storage&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;instance&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;set&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;DataKey&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;BlendPool&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;blend_pool&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[contractimpl]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;impl&lt;/span&gt; &lt;span class="token class-name"&gt;CustomAccountInterface&lt;/span&gt; &lt;span class="token keyword"&gt;for&lt;/span&gt; &lt;span class="token class-name"&gt;AccountContract&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;type&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;Signature&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;Signature&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;type&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;Error&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;AccError&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token attr-name attribute"&gt;#[allow(non_snake_case)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;__check_auth&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        env&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Env&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        signature_payload&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Hash&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        signature&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Signature&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        auth_contexts&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Vec&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;Context&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="token class-name"&gt;Result&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;AccError&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token function"&gt;authenticate&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;signature_payload&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;signature&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token operator"&gt;?&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token comment"&gt;//Ok(())&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token comment"&gt;// Note that this is actually unsafe and should generally not be used&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token comment"&gt;// in production. A valid signer could include the Blend submit operation&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token comment"&gt;// as part of the call stack but perform other malicious operations too.&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; result &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;Err&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;AccError&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;InvalidContext&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;         &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;for&lt;/span&gt; context &lt;span class="token keyword"&gt;in&lt;/span&gt; auth_contexts&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;iter&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token keyword"&gt;match&lt;/span&gt; context &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token class-name"&gt;Context&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Contract&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;c&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token keyword"&gt;if&lt;/span&gt; c&lt;span class="token punctuation"&gt;.&lt;/span&gt;fn_name &lt;span class="token operator"&gt;==&lt;/span&gt; &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                        &lt;span class="token operator"&gt;&amp;amp;&amp;amp;&lt;/span&gt; c&lt;span class="token punctuation"&gt;.&lt;/span&gt;contract &lt;span class="token operator"&gt;==&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;storage&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;instance&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;get&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;DataKey&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;BlendPool&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                        result &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;Ok&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                _ &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        result &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;authenticate&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    env&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;Env&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    signature_payload&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;Hash&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    signature&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;Signature&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="token class-name"&gt;Result&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;AccError&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token operator"&gt;!&lt;/span&gt;env &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;storage&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;instance&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;has&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;DataKey&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Signer&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;signature&lt;span class="token punctuation"&gt;.&lt;/span&gt;public_key&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token keyword"&gt;return&lt;/span&gt; &lt;span class="token class-name"&gt;Err&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;AccError&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;UnknownSigner&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;crypto&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;ed25519_verify&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;signature&lt;span class="token punctuation"&gt;.&lt;/span&gt;public_key&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;signature_payload&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;signature&lt;span class="token punctuation"&gt;.&lt;/span&gt;signature&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;Ok&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr/&gt;&lt;h1 id="building-the-bot"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#building-the-bot" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Building the Bot&lt;/h1&gt;&lt;p&gt;This section is split in five parts:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Monitoring the network and understanding when we should tigger the on-chain action.&lt;/li&gt;&lt;li&gt;Building and simulating the transaction to supply XLM.&lt;/li&gt;&lt;li&gt;Sign the auth payload.&lt;/li&gt;&lt;li&gt;Adjusting the footprint&lt;/li&gt;&lt;li&gt;Submitting the transaction.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id="monitoring-the-network"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#monitoring-the-network" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Monitoring the Network&lt;/h2&gt;&lt;p&gt;This is the simples section and doesn&amp;#x27;t need much of an explanation:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[no_mangle]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;extern&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;on_close&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; env &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;EnvClient&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; ybx_contract &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token namespace"&gt;stellar_strkey&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;Contract&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;from_string&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token constant"&gt;CONTRACT&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; searched_events&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Vec&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;PrettyContractEvent&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; events &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;reader&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;pretty&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban_events&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        events &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;iter&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;filter_map&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token closure-params"&gt;&lt;span class="token punctuation closure-punctuation"&gt;|&lt;/span&gt;x&lt;span class="token punctuation closure-punctuation"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token keyword"&gt;if&lt;/span&gt; x&lt;span class="token punctuation"&gt;.&lt;/span&gt;contract &lt;span class="token operator"&gt;==&lt;/span&gt; ybx_contract &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token class-name"&gt;Some&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;x&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token class-name"&gt;None&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;collect&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;for&lt;/span&gt; event &lt;span class="token keyword"&gt;in&lt;/span&gt; searched_events &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; action&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Symbol&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;from_scval&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;event&lt;span class="token punctuation"&gt;.&lt;/span&gt;topics&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; token&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Address&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;from_scval&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;event&lt;span class="token punctuation"&gt;.&lt;/span&gt;topics&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;if&lt;/span&gt; action &lt;span class="token operator"&gt;==&lt;/span&gt; &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;borrow&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token operator"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token function"&gt;soroban_string_to_alloc_string&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; token&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_string&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token operator"&gt;==&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;CAQCFVLOBK5GIULPNZRGATJJMIZL5BSP7X5YJVMGCPTUEPFM4AVSRCJU&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token function"&gt;execute_transaction&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we are basically saying our Zephyr program to execute the &lt;code&gt;execute_transaction&lt;/code&gt; function whenever we notice a new USDC (&lt;code&gt;CAQCFVLOBK5GIULPNZRGATJJMIZL5BSP7X5YJVMGCPTUEPFM4AVSRCJU&lt;/code&gt;) borrow happens.&lt;/p&gt;&lt;h2 id="building-and-simulating-the-transaction"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#building-and-simulating-the-transaction" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Building and simulating the transaction&lt;/h2&gt;&lt;p&gt;If you are already fairly familiar with Mercury and Zephyr, you&amp;#x27;ll know that it&amp;#x27;s possible to simulate transactions and send web requests from within a Zephyr program.&lt;/p&gt;&lt;p&gt;This means that our workflow here will be to build a valid transaction leveraging also simulation and then sending it to any horizon instance (in-program tx submission from our nodes coming soon!).&lt;/p&gt;&lt;p&gt;For transaction simulation and building, the steps we need to take are three:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Get our submitting account&amp;#x27;s sequence number (we&amp;#x27;re using the limited signer as tx submission account).&lt;/li&gt;&lt;li&gt;Build the &lt;code&gt;submit&lt;/code&gt; invocation.&lt;/li&gt;&lt;li&gt;Simulate it.&lt;/li&gt;&lt;/ol&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;execute_transaction&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;EnvClient&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token comment"&gt;// 1. Get the account sequence number.&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; account &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token namespace"&gt;stellar_strkey&lt;span class="token punctuation"&gt;::&lt;/span&gt;ed25519&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;PublicKey&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;from_string&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token constant"&gt;SOURCE_ACCOUNT&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; contract &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token namespace"&gt;stellar_strkey&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;Contract&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;from_string&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token constant"&gt;CONTRACT&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; sequence &lt;span class="token operator"&gt;=&lt;/span&gt; env &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;read_account_from_ledger&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;account&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;.&lt;/span&gt;seq_num&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;log&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;debug&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;Got sequence&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;None&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token comment"&gt;// 2. Build invocation parameters.&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; map&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Map&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Val&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token macro property"&gt;map!&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;request_type&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token number"&gt;2_u32&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;Address&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;from_string&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token namespace"&gt;zephyr_sdk&lt;span class="token punctuation"&gt;::&lt;/span&gt;soroban_sdk&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;String&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;from_str&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token string"&gt;&amp;quot;CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token comment"&gt;// XLM address&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            100_000_000_i128&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; args&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token namespace"&gt;soroban_sdk&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;Vec&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;Val&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token macro property"&gt;vec!&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token function"&gt;address_from_str&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token constant"&gt;ACCOUNT&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token function"&gt;address_from_str&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token constant"&gt;ACCOUNT&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token function"&gt;address_from_str&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token constant"&gt;ACCOUNT&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token macro property"&gt;vec!&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; map&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token comment"&gt;// 3. Simulate and build the transaction.&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; tx &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;simulate_contract_call_to_tx&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token constant"&gt;SOURCE_ACCOUNT&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        sequence &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;i64&lt;/span&gt; &lt;span class="token operator"&gt;+&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        contract&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        args&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token comment"&gt;// ...&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="sign-the-auth-payload"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#sign-the-auth-payload" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Sign the auth payload.&lt;/h2&gt;&lt;p&gt;Here comes the complex part. Now that simulation has returned us with the assembled transaction that includes all the auth entries that need to be signed. In our case, we will only need one signature (the one of our so-called limited signer) so that simplifies things a little, but this step still requires low-level XDR modifications:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; tx_with_signed_auth &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;sign_auth_entries&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    env&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;TransactionEnvelope&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;from_xdr_base64&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;tx&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;tx&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Limits&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;none&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is simple, but the &lt;code&gt;sign_auth_entries&lt;/code&gt; isn&amp;#x27;t as simple, below I will try to break it down.&lt;/p&gt;&lt;h3 id="signing-the-auth-entry"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#signing-the-auth-entry" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Signing the auth entry.&lt;/h3&gt;&lt;p&gt;Before getting into the code, let&amp;#x27;s understand what we need to do here. Simulation has returned us a transaction that contains one operation, an invoke host function operation. This host function now also contains an &lt;code&gt;auth&lt;/code&gt; field, which is the set of authorizations that should come attached to the invocation:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token comment"&gt;// From the generated XDR.&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;struct&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;InvokeHostFunctionOp&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; host_function&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;HostFunction&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; auth&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;VecM&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;SorobanAuthorizationEntry&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, in our case we really just need one as I mentioned above. But how should we craft the &lt;code&gt;SorobanAuthorizationEntry&lt;/code&gt;?&lt;/p&gt;&lt;p&gt;To understand that let&amp;#x27;s take a look at its structure first:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token comment"&gt;// From the generated XDR.&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;struct&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;SorobanAuthorizationEntry&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; credentials&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;SorobanCredentials&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; root_invocation&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;SorobanAuthorizedInvocation&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;enum&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;SorobanCredentials&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;SourceAccount&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;Address&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;SorobanAddressCredentials&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;root_invocation&lt;/code&gt; is the host function&amp;#x27;s root invocation which subsequently contains all its sub-invocations. It&amp;#x27;s basically the set of &amp;quot;soroban operations&amp;quot; (contract calls) that will be executed.&lt;/p&gt;&lt;p&gt;On the other hand, &lt;code&gt;credentials&lt;/code&gt; is either &lt;code&gt;SourceAccount&lt;/code&gt; i.e the source of the Stellar operation (in this case providing custom proofs isn&amp;#x27;t required/possible) or &lt;code&gt;SorobanAddressCredentials&lt;/code&gt;:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;struct&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;SorobanAddressCredentials&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; address&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;ScAddress&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; nonce&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;i64&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; signature_expiration_ledger&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;u32&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; signature&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default after simulation the fields &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;nonce&lt;/code&gt; are already set, and we need to set the &lt;code&gt;signature_expiration_ledger&lt;/code&gt; (currently set to 0 at this point of execution) and the &lt;code&gt;signature&lt;/code&gt; (currently set to &lt;code&gt;Void&lt;/code&gt; at this point of execution).&lt;/p&gt;&lt;p&gt;Building the &lt;code&gt;signature&lt;/code&gt; is where you need to be careful. Remember the [User-defined Signature](#User-defined Signature) section of the post?&lt;/p&gt;&lt;p&gt;The content of &lt;code&gt;signature&lt;/code&gt; should be an ScVal that correctly respects the definition of our custom-defined signature type:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[contracttype]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[derive(Clone)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;struct&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;Signature&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; public_key&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; signature&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token number"&gt;64&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here &lt;code&gt;public_key&lt;/code&gt; is the signer&amp;#x27;s public key and &lt;code&gt;signature&lt;/code&gt; is the result of having the signer sign the so-called &amp;quot;authorization preimage&amp;quot;. To build the preimage we export a &lt;a target="_blank" rel="noopener noreferrer" href="https://docs.rs/zephyr-sdk/latest/zephyr_sdk/utils/fn.build_authorization_preimage.html"&gt;convenient sdk function&lt;/a&gt;:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;let&lt;/span&gt; preimage &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;build_authorization_preimage&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    credentials&lt;span class="token punctuation"&gt;.&lt;/span&gt;nonce&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    new_sequence&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    auth&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;root_invocation&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now hash the preimage with &lt;a target="_blank" rel="noopener noreferrer" href="https://docs.rs/zephyr-sdk/latest/zephyr_sdk/utils/fn.sha256.html"&gt;another SDK helper&lt;/a&gt; and sign it with yet &lt;a target="_blank" rel="noopener noreferrer" href="https://docs.rs/zephyr-sdk/latest/zephyr_sdk/utils/fn.ed25519_sign.html"&gt;another helper&lt;/a&gt;:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;let&lt;/span&gt; payload &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;sha256&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;preimage&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_xdr&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Limits&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;none&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;public&lt;span class="token punctuation"&gt;,&lt;/span&gt; signature&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;ed25519_sign&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token constant"&gt;SECRET&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;payload&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;let&lt;/span&gt; public &lt;span class="token operator"&gt;=&lt;/span&gt; public&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_bytes&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We are now ready to build our signature object:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;let&lt;/span&gt; signature&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Map&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;Val&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Val&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token macro property"&gt;map!&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;signature&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;from_array&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;signature&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;public_key&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;from_array&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;public&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have the signature, the last missing piece of the auth entry is the signature expiration ledger. In our case, we&amp;#x27;ve decided for a signature validity of 100 ledgers starting from the current and then finish setting up the correct credentials:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;let&lt;/span&gt; new_sequence &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;reader&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;ledger_sequence&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;+&lt;/span&gt; &lt;span class="token constant"&gt;SIGNATURE_DURATION&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;credentials&lt;span class="token punctuation"&gt;.&lt;/span&gt;signature_expiration_ledger &lt;span class="token operator"&gt;=&lt;/span&gt; new_sequence&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;credentials&lt;span class="token punctuation"&gt;.&lt;/span&gt;signature &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_scval&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;signature&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Below is the full code which also contains all the XDR extractions and modifiers:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;sign_auth_entries&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;EnvClient&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; tx&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;TransactionEnvelope&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="token class-name"&gt;Transaction&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; new_sequence &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;reader&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;ledger_sequence&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;+&lt;/span&gt; &lt;span class="token constant"&gt;SIGNATURE_DURATION&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token class-name"&gt;TransactionEnvelope&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Tx&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;TransactionV1Envelope&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; tx&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token punctuation"&gt;..&lt;/span&gt; &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; tx &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token macro property"&gt;panic!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; source &lt;span class="token operator"&gt;=&lt;/span&gt; tx&lt;span class="token punctuation"&gt;.&lt;/span&gt;operations&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_vec&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;source_account&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token namespace"&gt;xdr&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;OperationBody&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;InvokeHostFunction&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; host_function&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        tx&lt;span class="token punctuation"&gt;.&lt;/span&gt;operations&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_vec&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;body&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token macro property"&gt;panic!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; auth &lt;span class="token operator"&gt;=&lt;/span&gt; host_function&lt;span class="token punctuation"&gt;.&lt;/span&gt;auth&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_vec&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token namespace"&gt;xdr&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;SorobanCredentials&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Address&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; credentials&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; auth&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;credentials &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token macro property"&gt;panic!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; preimage &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;build_authorization_preimage&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        credentials&lt;span class="token punctuation"&gt;.&lt;/span&gt;nonce&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        new_sequence&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        auth&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;root_invocation&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; payload &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;sha256&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;preimage&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_xdr&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Limits&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;none&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;public&lt;span class="token punctuation"&gt;,&lt;/span&gt; signature&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;ed25519_sign&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token constant"&gt;SECRET&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;payload&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; public &lt;span class="token operator"&gt;=&lt;/span&gt; public&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_bytes&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; signature&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Map&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;Val&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Val&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token macro property"&gt;map!&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;signature&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;from_array&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;signature&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;public_key&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;BytesN&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;from_array&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;public&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into_val&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    credentials&lt;span class="token punctuation"&gt;.&lt;/span&gt;signature_expiration_ledger &lt;span class="token operator"&gt;=&lt;/span&gt; new_sequence&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    credentials&lt;span class="token punctuation"&gt;.&lt;/span&gt;signature &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_scval&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;signature&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    auth&lt;span class="token punctuation"&gt;.&lt;/span&gt;credentials &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token namespace"&gt;xdr&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;SorobanCredentials&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Address&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;credentials&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    host_function&lt;span class="token punctuation"&gt;.&lt;/span&gt;auth &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token namespace"&gt;std&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token macro property"&gt;vec!&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;auth&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;try_into&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    tx&lt;span class="token punctuation"&gt;.&lt;/span&gt;operations &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token namespace"&gt;std&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token macro property"&gt;vec!&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token namespace"&gt;xdr&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;Operation&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        source_account&lt;span class="token punctuation"&gt;:&lt;/span&gt; source&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        body&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token namespace"&gt;xdr&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;OperationBody&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;InvokeHostFunction&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;host_function&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;try_into&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    tx &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="adjusting-the-footprint"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#adjusting-the-footprint" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Adjusting the footprint.&lt;/h2&gt;&lt;p&gt;The complex part is finally over but we still have some work to do:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Since simulation doesn&amp;#x27;t account for calls to &lt;code&gt;__check_auth&lt;/code&gt; since those are internal calls reserved solely to the auth framework, we need to include the smart account contract in the footprint (so both instance and code).&lt;/li&gt;&lt;li&gt;Since Zephyr is currently running a master branch of soroban simulationa and we need to also account for signature verficiation which isn&amp;#x27;t included when simulating in recording mode, we also need to adjust our fee and resources configuration.&lt;/li&gt;&lt;/ol&gt;&lt;h3 id="adding-the-smart-account-to-the-footprint"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#adding-the-smart-account-to-the-footprint" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Adding the smart account to the footprint.&lt;/h3&gt;&lt;p&gt;This step is crucial since generally we expect simulation to actually cover anything footprint-related but this isn&amp;#x27;t the case at the moment for smart accounts. If we ignore the fact that simulation doesn&amp;#x27;t account for the smart wallet since it wasn&amp;#x27;t directly invoked in the call stack this is what we end up with:&lt;/p&gt;&lt;img src="https://blog.xycloo.com/static/images/failed-tx-outside-footprint.png"/&gt;&lt;p&gt;So let&amp;#x27;s now add the instance and code to the footprint. We actually do this thorugh another &lt;a target="_blank" rel="noopener noreferrer" href="https://docs.rs/zephyr-sdk/latest/zephyr_sdk/utils/fn.add_contract_to_footprint.html"&gt;useful helper SDK function&lt;/a&gt;:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token class-name"&gt;TransactionExt&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token constant"&gt;V1&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; v1ext&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; tx_with_signed_auth&lt;span class="token punctuation"&gt;.&lt;/span&gt;ext &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token macro property"&gt;panic!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; r &lt;span class="token operator"&gt;=&lt;/span&gt; v1ext&lt;span class="token punctuation"&gt;.&lt;/span&gt;resources&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; footprint &lt;span class="token operator"&gt;=&lt;/span&gt; r&lt;span class="token punctuation"&gt;.&lt;/span&gt;footprint&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token function"&gt;add_contract_to_footprint&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; footprint&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token constant"&gt;ACCOUNT&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token namespace"&gt;hex&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token function"&gt;decode&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token constant"&gt;ACCOUNT_HASH&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;r&lt;span class="token punctuation"&gt;.&lt;/span&gt;footprint &lt;span class="token operator"&gt;=&lt;/span&gt; footprint&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="adjusting-resources-and-fee"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#adjusting-resources-and-fee" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Adjusting resources and fee.&lt;/h3&gt;&lt;p&gt;This is quite straightforward and in any production setup we recommend checking that these are optimized:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;r&lt;span class="token punctuation"&gt;.&lt;/span&gt;instructions &lt;span class="token operator"&gt;+=&lt;/span&gt; &lt;span class="token constant"&gt;INSTRUCTIONS_FIX&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;r&lt;span class="token punctuation"&gt;.&lt;/span&gt;write_bytes &lt;span class="token operator"&gt;+=&lt;/span&gt; &lt;span class="token constant"&gt;WRITE_BYTES_FIX&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;r&lt;span class="token punctuation"&gt;.&lt;/span&gt;read_bytes &lt;span class="token operator"&gt;+=&lt;/span&gt; &lt;span class="token constant"&gt;READ_BYTES_FIX&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;v1ext&lt;span class="token punctuation"&gt;.&lt;/span&gt;resource_fee &lt;span class="token operator"&gt;+=&lt;/span&gt; &lt;span class="token constant"&gt;RESOURCE_FEE_FIX&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;v1ext&lt;span class="token punctuation"&gt;.&lt;/span&gt;resources &lt;span class="token operator"&gt;=&lt;/span&gt; r&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;tx_with_signed_auth&lt;span class="token punctuation"&gt;.&lt;/span&gt;ext &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;TransactionExt&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token constant"&gt;V1&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;v1ext&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;tx_with_signed_auth&lt;span class="token punctuation"&gt;.&lt;/span&gt;fee &lt;span class="token operator"&gt;+=&lt;/span&gt; &lt;span class="token constant"&gt;FEE_FIX&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="signing-and-submitting-the-transaction"&gt;&lt;a href="https://blog.xycloo.com/blog/blend-bot-with-zephyr-and-smart-accounts#signing-and-submitting-the-transaction" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Signing and Submitting the transaction.&lt;/h2&gt;&lt;p&gt;We&amp;#x27;ve signed our auth entries, but hey someone has got to pay for the transaction fees right?&lt;/p&gt;&lt;p&gt;Luckily, we also have a very handy SDK helper for this situation, &lt;a target="_blank" rel="noopener noreferrer" href="https://docs.rs/zephyr-sdk/latest/zephyr_sdk/utils/fn.sign_transaction.html"&gt;&lt;code&gt;sign_transaction&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;let&lt;/span&gt; signed &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;sign_transaction&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;tx_with_signed_auth&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token constant"&gt;NETWORK&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token constant"&gt;SECRET&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;send_web_request&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;AgnosticRequest&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    body&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Some&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token macro property"&gt;format!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;tx={}&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token function"&gt;encode&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;signed&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    url&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;https://horizon-testnet.stellar.org/transactions&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_string&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    method&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token namespace"&gt;zephyr_sdk&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;Method&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Post&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    headers&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token namespace"&gt;std&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token macro property"&gt;vec!&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token string"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_string&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token string"&gt;&amp;quot;application/x-www-form-urlencoded&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_string&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The web request will also sound familiar if you&amp;#x27;ve already worked directly with Horizon. That said, beware that a prioritized tx submission host function which directly submits from our node is being developed!&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;The program is now complete! You can find the complete codebase (smart wallet + zephyr program) in &lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/xycloo/zephyr-examples/tree/master/onchain-actions"&gt;the zephyr examples repo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Stellar&amp;#x27;s native account abstraction features offer incredible potential that remains largely untapped. We hope this in-depth post will serve as a valuable resource for other developers looking to explore this exciting field.&lt;/p&gt;&lt;p&gt;The combination of smart wallets and Zephyr-powered DeFi bots is especially powerful, and we plan to continue exploring this synergy. We’ll also be adding new functionalities as needed. This post offers just a glimpse into the many use cases within the broader DeFi ecosystem, particularly when your bot runs on Mercury. With Mercury, you gain access not only to real-time data but also to historical data, ledger information, and even custom-indexed tables like the &lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/xycloo/zephyr-examples/blob/master/zephyr-blend-mainnet-dashboard/src/types.rs#L108"&gt;Blend index&lt;/a&gt; or the &lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/soroswap/zephyr-indexer/blob/main/"&gt;soroswap index&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We’re excited to hear your feedback and explore new ideas together. If you have any thoughts or suggestions, please don’t hesitate to reach out!&lt;/p&gt;&lt;/div&gt;</content>
    <link rel="enclosure" type="image/png" href="https://blog.xycloo.com/static/images/twitter-card.png"/>
  </entry>
  <entry>
    <title type="html">Data Access After Protocol 20: How and Why Mercury (and Zephyr) Addresses Evolving Data Needs.</title>
    <published>2024-02-19T00:00:00+00:00</published>
    <updated>2024-02-19T00:00:00+00:00</updated>
    <id>https://blog.xycloo.com/blog/explaining-mercury-stellar-event</id>
    <link rel="alternate" type="text/html" href="https://blog.xycloo.com/blog/explaining-mercury-stellar-event"/>
    <author>
      <name>hello@xycloo.com (xyclooLabs team)</name>
    </author>
    <content type="html">&lt;div class="prose max-w-none pb-8 pt-10 dark:prose-invert"&gt;&lt;p&gt;The recent &amp;quot;Working with Data on Stellar&amp;quot; event featuring our co-founder &lt;a target="_blank" rel="noopener noreferrer" href="https://twitter.com/heytdep"&gt;tdep&lt;/a&gt; event delved into the impact of Protocol 20 on data access within the Stellar ecosystem and the role of indexing services, with a special focus on how the &lt;a target="_blank" rel="noopener noreferrer" href="https://mercurydata.app/"&gt;Mercury&lt;/a&gt; indexer is designed to fit at best among other network components.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Soon the recording of the event should be shared so you will be able to replay it.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h1 id="introduction"&gt;&lt;a href="https://blog.xycloo.com/blog/explaining-mercury-stellar-event#introduction" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;The event kicked off with a high-level overview of Stellar Network&amp;#x27;s data management. We explored both the network&amp;#x27;s current data, as handled by Stellar-Core, and its historical data, focusing on the role of archivers.&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;Next, we dived into how the introduction of smart contracts in the Stellar Network created the necessity of indexing services.&lt;/p&gt;&lt;h1 id="before-protocol-20"&gt;&lt;a href="https://blog.xycloo.com/blog/explaining-mercury-stellar-event#before-protocol-20" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Before Protocol 20&lt;/h1&gt;&lt;p&gt;Before Protocol 20, accessing data on Stellar followed well-established patterns due to the predefined structure of data and tx effets.&lt;/p&gt;&lt;p&gt;For simpler applications and wallets, explorer services provided efficient retrieval of transactions, user data, and other relevant information. The predefined structure of data and linear logics flows made complex queries unnecessary. More complex applications employed custom backend solutions. For instance, if non-custodial, the backend would generate transactions for the user to sign and send, while also fetching data and storing it in separate databases. Alternatively, running your own Stellar infrastructure allowed complete control over data ingestion flow and organization.&lt;/p&gt;&lt;h1 id="what-changes-with-protocol-20"&gt;&lt;a href="https://blog.xycloo.com/blog/explaining-mercury-stellar-event#what-changes-with-protocol-20" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;What Changes with Protocol 20&lt;/h1&gt;&lt;p&gt;The introduction of Protocol 20, particularly when working with smart contracts and decentralized environments, presents new challenges and needs around data access. Existing methods like block explorers and RPCs can be used, but are ofter insufficient for the deep, granular, and complex queries often required.&lt;/p&gt;&lt;p&gt;This is because of the added on-chain complexity, where we have contract logic instead of pre-defined logic. Furthermore, user-protocol (DeFi) interactions now happen entirely on-chain, eliminating the involvement of external backends and databases. As a result, protocols and developers who need to retrieve data efficiently with advanced querying needs can either build and maintain their own infrastructure or leverage an indexing service.&lt;/p&gt;&lt;hr/&gt;&lt;h1 id="the-role-of-an-indexer"&gt;&lt;a href="https://blog.xycloo.com/blog/explaining-mercury-stellar-event#the-role-of-an-indexer" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;The Role of an Indexer&lt;/h1&gt;&lt;p&gt;An ideal indexing service acts as an intermediary between applications and the network&amp;#x27;s data, fulfilling several criteria. We&amp;#x27;ve talked specifically about 4 charateristics:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Efficiency: Fast API, can also work with large amounts of data efficiently.&lt;/li&gt;&lt;li&gt;Granularity and complexity: The ability to construct highly specific or complex queries, targeting precise elements/groups of the data.&lt;/li&gt;&lt;li&gt;Flexibility: Customizable, flexible to work out of the box with clients.&lt;/li&gt;&lt;li&gt;Cost-Effectiveness: Maintaining a light infrastructure means less costs, which also means less costs for the users.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Theoretically, the ideal indexer would employ and maintain a minimal infrastructure, storing only the data demonstrably utilized.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This aligns with findings from Horizon developers where over 90% of user access pertains to data within the past year, and were considering trimming past history to make the service more sustainable.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;However, managed indexers don&amp;#x27;t know in advance which data will require the efficiency offered by indexers (lots of data can easily be obtain through explorers without for example forming a complex query). Consequently, they store all data and maintain its full history (for instance, they can also power block explorers), making minimal storage and infrastructure impractical.&lt;/p&gt;&lt;p&gt;Moreover, within the Stellar ecosystem, existing services like Horizon and Stellar Expert already excel at providing access to historical data such as transactions, user data, etc. This eliminates the need for indexers to replicate their functionality or store data unlikely to ever be queried through an indexer (e.g., lots classic Stellar data unless you need the functionalities of an indexer or are working both on soroban and classic).&lt;/p&gt;&lt;h1 id="introducing-the-mercury-indexer"&gt;&lt;a href="https://blog.xycloo.com/blog/explaining-mercury-stellar-event#introducing-the-mercury-indexer" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Introducing the Mercury Indexer&lt;/h1&gt;&lt;p&gt;Mercury emerges as an indexing service specifically designed for the Stellar ecosystem. Recognizing the strengths of existing infrastructure, Mercury avoids any overlap with its functionalities. Instead, it leverages the concept of subscriptions, empowering clients to target and store only the data segments they require. This aligns with the inherent determinism of the chain, where developers possess prior knowledge of the data they need before deployment. For instance, subscribing to specific ledger entries allows Mercury to store precisely that data, optimizing storage and query performance.&lt;/p&gt;&lt;p&gt;Through this design, Mercury can easily achieve maximum efficiency without uselessy overlapping with existing functionality.&lt;/p&gt;&lt;h3 id="example"&gt;&lt;a href="https://blog.xycloo.com/blog/explaining-mercury-stellar-event#example" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Example&lt;/h3&gt;&lt;p&gt;For example, let&amp;#x27;s assume that I want to index transfer events for my token as I need an efficient way to query these for my dapp or service. In Mercury, I can subscribe to events for my token contract that have as first topic &lt;code&gt;ScVal::Symbol(ScvSymbol(&amp;quot;transfer&amp;quot;))&lt;/code&gt;, and from that moment start indexing all related events.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Note: you can also subscribe to all of contract&amp;#x27;s events.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The above approach however, can sometimes lead to bad user experience as, even though the developer already knows before deploying the contract that they will need to index those events, making a subscription to Mercury is not the first thing that comes to their mind. As a result, once the contract was deployed and tested on chain, the developer would need to re-emit the events to populate the Mercury database.&lt;/p&gt;&lt;h2 id="solving-the-ux-dilemma"&gt;&lt;a href="https://blog.xycloo.com/blog/explaining-mercury-stellar-event#solving-the-ux-dilemma" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Solving the UX dilemma.&lt;/h2&gt;&lt;p&gt;To prevent this inconvenience, we have introduced data retention policies targeting specific data structures. For example, we currently have a retention policy of 2 months for contract events without an associated subscription (the retention is idefinite for events with an associated subscription). This way, you can access events that were emitted up to two months before making the subscription.&lt;/p&gt;&lt;p&gt;This is however not a replacement to indexing historical data.&lt;/p&gt;&lt;h2 id="solving-the-historical-data-problem"&gt;&lt;a href="https://blog.xycloo.com/blog/explaining-mercury-stellar-event#solving-the-historical-data-problem" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Solving the historical data problem.&lt;/h2&gt;&lt;p&gt;Let&amp;#x27;s say that you need to index data for a project that has been active for 4 months and want to start relying on Mercury. In that case, you cannot obtain full information through data retention. Currently, there would be no way to populate the database with past data.&lt;/p&gt;&lt;p&gt;However, we recognize the importance of such a feature, and are planning to implement soon data catchups on request, were we allow clients to catchup their subscriptions with historical data. We have already conducted a catchup of testnet for a client, and plan to standardize the activity in the next releases.&lt;/p&gt;&lt;h2 id="tackling-customizability"&gt;&lt;a href="https://blog.xycloo.com/blog/explaining-mercury-stellar-event#tackling-customizability" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Tackling customizability&lt;/h2&gt;&lt;p&gt;As of now, we&amp;#x27;ve explored the functionality of Mercury &amp;quot;classic&amp;quot;/&amp;quot;vanilla&amp;quot; where, while you have some degree of customizability in the susbcriptions, as any other managed indexing service you can&amp;#x27;t directly modify the ingestion flow.&lt;/p&gt;&lt;p&gt;However, some clients might need to have very personalized indexes with aggregations, multi-step workflows, etc.&lt;/p&gt;&lt;p&gt;To allow for such degree of customiation without leaving the comfort of working with a managed infrastructure, we have built and integrated in Mercury the &lt;a target="_blank" rel="noopener noreferrer" href="https://mercurydata.app/zephyr-vm"&gt;Zephyr Virtual Machine&lt;/a&gt;. This allows us to power a cloud execution environment where users can safely deploy programs that define custom ingestion logic. These programs can interact with the database (read, write, update) and access ledger meta ledger by ledger.&lt;/p&gt;&lt;hr/&gt;&lt;h1 id="live-coding-session"&gt;&lt;a href="https://blog.xycloo.com/blog/explaining-mercury-stellar-event#live-coding-session" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Live Coding Session&lt;/h1&gt;&lt;p&gt;During the live coding session part of the event we coded a Zephyr program to calculate the amount of stellar classic operations, contract operations, and the exponential moving average for classic and soroban transactions.&lt;/p&gt;&lt;p&gt;The index is public and can be accessed by anyone, follow the instructions &lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/xycloo/working-with-data-on-stellar-event-zephyr"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Currently, we are only supporting the Rust SDK, though any WASM compatible language can work with Zephyr. This is the code for the above program:&lt;/p&gt;&lt;p&gt;&lt;em&gt;Note that this is a very early version of the SDK and we plan on improving the experience for developers.&lt;/em&gt;&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="language-rust code-highlight"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;use&lt;/span&gt; &lt;span class="token namespace"&gt;rs_zephyr_sdk&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;log&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token namespace"&gt;stellar_xdr&lt;span class="token punctuation"&gt;::&lt;/span&gt;next&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;span class="token class-name"&gt;FeeBumpTransactionInnerTx&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Operation&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;OperationBody&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;TransactionEnvelope&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;TransactionResultResult&lt;/span&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Condition&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;DatabaseDerive&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;DatabaseInteract&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;EnvClient&lt;/span&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;use&lt;/span&gt; &lt;span class="token namespace"&gt;ta&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;span class="token namespace"&gt;indicators&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;ExponentialMovingAverage&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Next&lt;/span&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[derive(DatabaseDerive, Clone)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[with_name(&lt;span class="token string"&gt;&amp;quot;avgfee&amp;quot;&lt;/span&gt;)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;struct&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;Stats&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; classic&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;i128&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; contracts&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;i128&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; other&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;i128&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; fee_sor&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;ExponentialMovingAverage&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; fee_clas&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;ExponentialMovingAverage&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;const&lt;/span&gt; &lt;span class="token constant"&gt;PERIOD&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;usize&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;12&lt;/span&gt; &lt;span class="token operator"&gt;*&lt;/span&gt; &lt;span class="token number"&gt;60&lt;/span&gt; &lt;span class="token operator"&gt;*&lt;/span&gt; &lt;span class="token number"&gt;24&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token comment"&gt;// Slightly updated version for precision correctness.&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token comment"&gt;// Please note that this design is not the most efficient (and it hasn&amp;#x27;t been thought through much) and can definitely be improved. This&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token comment"&gt;// is the result of an on-the-fly coded program in the Stellar Event &amp;quot;Working with Data on Stellar, the Role of Indexers and Live-Coding a ZephyrVM Program&amp;quot;.&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[no_mangle]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;extern&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;on_close&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; env &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;EnvClient&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; reader &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;reader&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;contract&lt;span class="token punctuation"&gt;,&lt;/span&gt; classic&lt;span class="token punctuation"&gt;,&lt;/span&gt; other&lt;span class="token punctuation"&gt;,&lt;/span&gt; avg_soroban&lt;span class="token punctuation"&gt;,&lt;/span&gt; avg_classic&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; contract_invocations &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; classic &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; other_soroban &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; tot_soroban_fee &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; tot_classic_fee &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; envelopes &lt;span class="token operator"&gt;=&lt;/span&gt; reader&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;envelopes_with_meta&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; successful_envelopes &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;         &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;for&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;envelope&lt;span class="token punctuation"&gt;,&lt;/span&gt; meta&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token keyword"&gt;in&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;envelopes &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token keyword"&gt;let&lt;/span&gt; charged &lt;span class="token operator"&gt;=&lt;/span&gt; meta&lt;span class="token punctuation"&gt;.&lt;/span&gt;result&lt;span class="token punctuation"&gt;.&lt;/span&gt;result&lt;span class="token punctuation"&gt;.&lt;/span&gt;fee_charged&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token keyword"&gt;let&lt;/span&gt; success &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;match&lt;/span&gt; meta&lt;span class="token punctuation"&gt;.&lt;/span&gt;result&lt;span class="token punctuation"&gt;.&lt;/span&gt;result&lt;span class="token punctuation"&gt;.&lt;/span&gt;result &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token class-name"&gt;TransactionResultResult&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;TxSuccess&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;_&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token boolean"&gt;true&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token class-name"&gt;TransactionResultResult&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;TxFeeBumpInnerSuccess&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;_&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token boolean"&gt;true&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                _ &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token boolean"&gt;false&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token keyword"&gt;if&lt;/span&gt; success &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                successful_envelopes &lt;span class="token operator"&gt;+=&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token keyword"&gt;match&lt;/span&gt; envelope &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token class-name"&gt;TransactionEnvelope&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Tx&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;v1&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                        &lt;span class="token function"&gt;count_ops_and_fees&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;v1&lt;span class="token punctuation"&gt;.&lt;/span&gt;tx&lt;span class="token punctuation"&gt;.&lt;/span&gt;operations&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_vec&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; charged&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; classic&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; contract_invocations&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; other_soroban&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; tot_soroban_fee&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; tot_classic_fee&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token class-name"&gt;TransactionEnvelope&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;TxFeeBump&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;feebump&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                        &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token class-name"&gt;FeeBumpTransactionInnerTx&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Tx&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;v1&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;feebump&lt;span class="token punctuation"&gt;.&lt;/span&gt;tx&lt;span class="token punctuation"&gt;.&lt;/span&gt;inner_tx&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                        &lt;span class="token function"&gt;count_ops_and_fees&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;v1&lt;span class="token punctuation"&gt;.&lt;/span&gt;tx&lt;span class="token punctuation"&gt;.&lt;/span&gt;operations&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_vec&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; charged&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; classic&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; contract_invocations&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; other_soroban&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; tot_soroban_fee&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; tot_classic_fee&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token class-name"&gt;TransactionEnvelope&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;TxV0&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;v0&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                        &lt;span class="token function"&gt;count_ops_and_fees&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;v0&lt;span class="token punctuation"&gt;.&lt;/span&gt;tx&lt;span class="token punctuation"&gt;.&lt;/span&gt;operations&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;to_vec&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; charged&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; classic&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; contract_invocations&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; other_soroban&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; tot_soroban_fee&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; tot_classic_fee&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;(&lt;/span&gt;contract_invocations &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;i128&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; classic &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;i128&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; other_soroban &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;i128&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; tot_soroban_fee &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;f64&lt;/span&gt; &lt;span class="token operator"&gt;/&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;contract_invocations&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;f64&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; tot_classic_fee &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;f64&lt;/span&gt; &lt;span class="token operator"&gt;/&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;successful_envelopes &lt;span class="token operator"&gt;-&lt;/span&gt; contract_invocations&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;f64&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; current &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;read&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;Stats&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token class-name"&gt;Some&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;row&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; current&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;last&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; row &lt;span class="token operator"&gt;=&lt;/span&gt; row&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;if&lt;/span&gt; avg_classic&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;is_normal&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            row&lt;span class="token punctuation"&gt;.&lt;/span&gt;fee_clas&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;next&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;avg_classic &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;f64&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;if&lt;/span&gt; avg_soroban&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;is_normal&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            row&lt;span class="token punctuation"&gt;.&lt;/span&gt;fee_sor&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;next&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;avg_soroban &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;f64&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; previous_classic &lt;span class="token operator"&gt;=&lt;/span&gt; row&lt;span class="token punctuation"&gt;.&lt;/span&gt;classic&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        row&lt;span class="token punctuation"&gt;.&lt;/span&gt;classic &lt;span class="token operator"&gt;+=&lt;/span&gt; classic&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        row&lt;span class="token punctuation"&gt;.&lt;/span&gt;contracts &lt;span class="token operator"&gt;+=&lt;/span&gt; contract&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        row&lt;span class="token punctuation"&gt;.&lt;/span&gt;other &lt;span class="token operator"&gt;+=&lt;/span&gt; other&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;/span&gt;&lt;span class="code-line"&gt;        env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;update&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;row&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token class-name"&gt;Condition&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;ColumnEqualTo&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;classic&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;into&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token namespace"&gt;bincode&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token function"&gt;serialize&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;ZephyrVal&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token constant"&gt;I128&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;previous_classic&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; fee_soroban &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;ExponentialMovingAverage&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token constant"&gt;PERIOD&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;         &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;if&lt;/span&gt; avg_soroban&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;is_normal&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            fee_soroban&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;next&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;avg_soroban&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; fee_classic &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;ExponentialMovingAverage&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token constant"&gt;PERIOD&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;if&lt;/span&gt; avg_classic&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;is_normal&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            fee_classic&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;next&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;avg_classic&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;put&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;Stats&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            classic&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            contracts&lt;span class="token punctuation"&gt;:&lt;/span&gt; contract&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            other&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            fee_sor&lt;span class="token punctuation"&gt;:&lt;/span&gt; fee_soroban&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            fee_clas&lt;span class="token punctuation"&gt;:&lt;/span&gt; fee_classic &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;count_ops_and_fees&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;ops&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Vec&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;Operation&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; txfee&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;i64&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; classic&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; &lt;span class="token keyword"&gt;i32&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; contract_invocations&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; &lt;span class="token keyword"&gt;i32&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; other_soroban&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; &lt;span class="token keyword"&gt;i32&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; tot_soroban_fee&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; &lt;span class="token keyword"&gt;i64&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; tot_classic_fee&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; &lt;span class="token keyword"&gt;i64&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token comment"&gt;// only 1 invokehostfn operations can be in one transaction&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token class-name"&gt;Some&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;op&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; ops&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;get&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token class-name"&gt;OperationBody&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;InvokeHostFunction&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;_&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; op&lt;span class="token punctuation"&gt;.&lt;/span&gt;body &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token operator"&gt;*&lt;/span&gt;tot_soroban_fee &lt;span class="token operator"&gt;+=&lt;/span&gt; txfee&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token operator"&gt;*&lt;/span&gt;tot_classic_fee &lt;span class="token operator"&gt;+=&lt;/span&gt; txfee &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;     &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;for&lt;/span&gt; op &lt;span class="token keyword"&gt;in&lt;/span&gt; ops&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;iter&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;match&lt;/span&gt; op&lt;span class="token punctuation"&gt;.&lt;/span&gt;body &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;OperationBody&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;InvokeHostFunction&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;_&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token operator"&gt;*&lt;/span&gt;contract_invocations &lt;span class="token operator"&gt;+=&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;OperationBody&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;ExtendFootprintTtl&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;_&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token operator"&gt;*&lt;/span&gt;other_soroban &lt;span class="token operator"&gt;+=&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;OperationBody&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;RestoreFootprint&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;_&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token operator"&gt;*&lt;/span&gt;other_soroban &lt;span class="token operator"&gt;+=&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            _ &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token operator"&gt;*&lt;/span&gt;classic &lt;span class="token operator"&gt;+=&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link rel="enclosure" type="image/png" href="https://blog.xycloo.com/static/images/twitter-card.png"/>
  </entry>
  <entry>
    <title type="html">Indexing the Blend YieldBlox Pool in 125 Lines of Code and 8 Minutes.</title>
    <published>2024-08-06T00:00:00+00:00</published>
    <updated>2024-08-06T00:00:00+00:00</updated>
    <id>https://blog.xycloo.com/blog/indexing-blend-ybx-pool</id>
    <link rel="alternate" type="text/html" href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool"/>
    <author>
      <name>hello@xycloo.com (xyclooLabs team)</name>
    </author>
    <content type="html">&lt;div class="prose max-w-none pb-8 pt-10 dark:prose-invert"&gt;&lt;p&gt;If you&amp;#x27;ve watched the YieldBlox indexing previews &lt;a target="_blank" rel="noopener noreferrer" href="https://x.com/xyclooLabs/status/1817949476352413848"&gt;https://x.com/xyclooLabs/status/1817949476352413848&lt;/a&gt; and &lt;a target="_blank" rel="noopener noreferrer" href="https://x.com/xyclooLabs/status/1819011595906752753"&gt;https://x.com/xyclooLabs/status/1819011595906752753&lt;/a&gt; and are waiting to see your historical actions on the YieldBlox pool, you can skip to the &lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#Result"&gt;result&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;As hinted in the tweet, we&amp;#x27;ll be building an indexer and API (to retrieve indexed data) specifically for the YieldBlox blend pool.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#why-mercury-and-zephyr"&gt;Why Mercury and Zephyr.&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#no-vendor-lock-in"&gt;No Vendor Lock-In&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#setup"&gt;Setup&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#creating-the-project"&gt;Creating the project.&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#writing-the-api"&gt;Writing the API&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#understanding-how-and-what-to-index"&gt;Understanding How and What to Index.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#tables-setup"&gt;Tables Setup&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#writing-the-ingestion-logic"&gt;Writing the Ingestion Logic&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#data-retrieval-through-a-custom-api"&gt;Data Retrieval Through A Custom API.&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#how-do-mercury-apis-work"&gt;How do Mercury APIs Work?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#defining-the-request-object"&gt;Defining the Request Object&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#building-the-retrieve-function-api"&gt;Building the retrieve function API.&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#local-testing"&gt;Local Testing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#deploying"&gt;Deploying&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#catching-up"&gt;Catching Up&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#result"&gt;Result&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr/&gt;&lt;h1 id="why-mercury-and-zephyr"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#why-mercury-and-zephyr" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Why Mercury and Zephyr.&lt;/h1&gt;&lt;p&gt;In the &lt;a target="_blank" rel="noopener noreferrer" href="https://x.com/xyclooLabs/status/1817949476352413848"&gt;first tweet&lt;/a&gt;, I showcased how to get raw events for the YieldBlox blend pool, but what if we want more structured data that is processed, indexed and retrieved in a way that is specific to the protocol and the pool?&lt;/p&gt;&lt;p&gt;This is often an important requirement for bigger and more structured protocols, or in general for a more efficient and real-time data provision.&lt;/p&gt;&lt;p&gt;Gernerally, to truly achieve this with hands on the code protocols would have to have their own server running a stellar core node, software to connect to its data, and processing logic on raw XDR data and initiate hours-long (if not days) catchups. However, leveraging Mercury&amp;#x27;s cloud execution environment we can achieve the exact same behaviour without having to run any infrastructure or code complex adapter logic.&lt;/p&gt;&lt;p&gt;Imagine that you could just write a program using an SDK built for building indexers, compile, deploy and immediately start querying. Additionally, you can rely on already processed historical data making catchups much faster.&lt;/p&gt;&lt;h3 id="no-vendor-lock-in"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#no-vendor-lock-in" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;No Vendor Lock-In&lt;/h3&gt;&lt;p&gt;Note that once you write your zephyr program it&amp;#x27;s not only bound to be executed in our servers, you can choose to self host and execute it on your infrastructure. Of course, you&amp;#x27;d loose many of the features of our cloud environment (catchups, function invocation infra, etc), but your program can run anywhere!&lt;/p&gt;&lt;hr/&gt;&lt;h1 id="setup"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#setup" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Setup&lt;/h1&gt;&lt;p&gt;To write custom indexers and APIs with Mercury, you&amp;#x27;ll need three things:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Rust installed (you can skip this assuming that you already work with Soroban smart contracts)&lt;/li&gt;&lt;li&gt;Mercury CLI installed: &lt;code&gt;cargo install mercury-cli&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;A Mercury account. We&amp;#x27;ll be working on mainnet so you need to create a mainnet account: &lt;a target="_blank" rel="noopener noreferrer" href="https://main.mercurydata.app/blog/indexing-blend-ybx-pool"&gt;https://main.mercurydata.app&lt;/a&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id="creating-the-project"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#creating-the-project" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Creating the project.&lt;/h2&gt;&lt;p&gt;To create a new Mercury project, use the Mercury CLI:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-bash"&gt;&lt;span class="code-line"&gt;mercury-cli new-project &lt;span class="token variable parameter"&gt;--name&lt;/span&gt; blend-ybx &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we&amp;#x27;re ready to start writing our API.&lt;/p&gt;&lt;h1 id="writing-the-api"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#writing-the-api" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Writing the API&lt;/h1&gt;&lt;p&gt;Full code is at &lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/heytdep/blend-ybx-pool-indexer"&gt;https://github.com/heytdep/blend-ybx-pool-indexer&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="understanding-how-and-what-to-index"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#understanding-how-and-what-to-index" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Understanding How and What to Index.&lt;/h2&gt;&lt;p&gt;Zephyr programs have a special function, &lt;code&gt;on_close&lt;/code&gt;, which is immediately invoked by our ingestion service as soon as a new leger closes with information about the ledger transition. As a result, the logic we&amp;#x27;ll use to build is to assume that we already are in possession of all ledger transition information (events, changes, transactions, etc).&lt;/p&gt;&lt;p&gt;Given that we&amp;#x27;re working with Soroban, we&amp;#x27;ll be going for an event-based indexer which brings several advantages as they are emitted sequentially and can be caught up through a data catchup. Since we want to keep all of the YieldBlox pool&amp;#x27;s borrow, repay, and collateral (deposit, withdraw) actions, we need to work with events as a trigger for processing and DB operations.&lt;/p&gt;&lt;p&gt;More specifically, we aren&amp;#x27;t creating any aggregation here, just indexing the actions we&amp;#x27;re interested in and organizing them in the database for easy retrieval.&lt;/p&gt;&lt;h2 id="tables-setup"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#tables-setup" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Tables Setup&lt;/h2&gt;&lt;p&gt;We need to first define how we want our indexed tables to look like. For this program, we will actually only rely on one table where we discern on the various actions through a column:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-rust"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;use&lt;/span&gt; &lt;span class="token namespace"&gt;serde&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;span class="token class-name"&gt;Deserialize&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Serialize&lt;/span&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;use&lt;/span&gt; &lt;span class="token namespace"&gt;zephyr_sdk&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token namespace"&gt;prelude&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token operator"&gt;*&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token namespace"&gt;soroban_sdk&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;span class="token namespace"&gt;xdr&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;ScString&lt;/span&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Address&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;DatabaseDerive&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;EnvClient&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;PrettyContractEvent&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[derive(Serialize, Deserialize, Clone, Copy)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[repr(u32)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;enum&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;Action&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;Borrow&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token class-name"&gt;Collateral&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[derive(DatabaseDerive, Serialize)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[with_name(&lt;span class="token string"&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;struct&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;Actions&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; action&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;u32&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; timestamp&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;u64&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; ledger&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;u32&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; asset&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;String&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; source&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;String&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;pub&lt;/span&gt; amount&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;i64&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since the Blend events are very well defined and are similar for every action, our &lt;code&gt;Actions&lt;/code&gt; table is homogenized among actions, with the only factor that identifies the actions being the &lt;code&gt;action&lt;/code&gt; field.&lt;/p&gt;&lt;p&gt;Note that our &lt;code&gt;Action&lt;/code&gt; enum only includes &lt;code&gt;Borrow&lt;/code&gt; and &lt;code&gt;Collateral&lt;/code&gt; without discerning between borrow and repays, or collateral supply or withdraw actions. That&amp;#x27;s because we will identify repays and withdrawals with negative amounts in &lt;code&gt;Actions.amount&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Now that we have defined our tables structure, we need to add the table to the soon-to-be script-generated &lt;code&gt;zephyr.toml&lt;/code&gt; config file:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-toml"&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;name&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;blend-ybx&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token class-name table"&gt;tables&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;name&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;actions&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token class-name table"&gt;tables.columns&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;name&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;action&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;col_type&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;BYTEA&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token class-name table"&gt;tables.columns&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;name&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;col_type&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;BYTEA&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token class-name table"&gt;tables.columns&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;name&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;ledger&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;col_type&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;BYTEA&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token class-name table"&gt;tables.columns&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;name&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;asset&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;col_type&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;BYTEA&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token class-name table"&gt;tables.columns&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;name&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;source&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;col_type&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;BYTEA&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token class-name table"&gt;tables.columns&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;name&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;amount&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token property key"&gt;col_type&lt;/span&gt; &lt;span class="token punctuation"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;BYTEA&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="writing-the-ingestion-logic"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#writing-the-ingestion-logic" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Writing the Ingestion Logic&lt;/h2&gt;&lt;p&gt;Now that our database is taken care of, we can proceed writing the &lt;code&gt;on_close&lt;/code&gt; function, i.e the function that will take care of real-time ingestion.&lt;/p&gt;&lt;p&gt;The logic is quite simple:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;We get the newly events, if any, of the YieldBlox pool contract.&lt;/li&gt;&lt;li&gt;For each of the event, we understand whether it&amp;#x27;s a&lt;ul&gt;&lt;li&gt;&lt;code&gt;supply_collateral&lt;/code&gt;, if so, we insert a new &lt;code&gt;Action::Collateral&lt;/code&gt; action with a positive &lt;code&gt;amount&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;withdraw_collateral&lt;/code&gt;, if so, we insert a new &lt;code&gt;Action::Collateral&lt;/code&gt; action with a negative &lt;code&gt;amount&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;borrow&lt;/code&gt;, if so, we insert a new &lt;code&gt;Action::Borrow&lt;/code&gt; action with a positive &lt;code&gt;amount&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;repay&lt;/code&gt;, if so, we insert a new &lt;code&gt;Action::Borrow&lt;/code&gt; action with a negative &lt;code&gt;amount&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-rust"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;const&lt;/span&gt; &lt;span class="token constant"&gt;CONTRACT&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token lifetime-annotation symbol"&gt;&amp;#x27;static&lt;/span&gt; &lt;span class="token keyword"&gt;str&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;CBP7NO6F7FRDHSOFQBT2L2UWYIZ2PU76JKVRYAQTG3KZSQLYAOKIF2WB&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[no_mangle]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;extern&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;on_close&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; env &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;EnvClient&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; ybx_contract &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token namespace"&gt;stellar_strkey&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;Contract&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;from_string&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token constant"&gt;CONTRACT&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; searched_events&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Vec&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;PrettyContractEvent&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; events &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;reader&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;pretty&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban_events&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        events &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;iter&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;filter_map&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token closure-params"&gt;&lt;span class="token punctuation closure-punctuation"&gt;|&lt;/span&gt;x&lt;span class="token punctuation closure-punctuation"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token keyword"&gt;if&lt;/span&gt; x&lt;span class="token punctuation"&gt;.&lt;/span&gt;contract &lt;span class="token operator"&gt;==&lt;/span&gt; ybx_contract &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token class-name"&gt;Some&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;x&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token class-name"&gt;None&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;collect&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;for&lt;/span&gt; event &lt;span class="token keyword"&gt;in&lt;/span&gt; searched_events &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; action&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Symbol&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;from_scval&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;event&lt;span class="token punctuation"&gt;.&lt;/span&gt;topics&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;if&lt;/span&gt; action &lt;span class="token operator"&gt;==&lt;/span&gt; &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;supply_collateral&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;Actions&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;add&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Action&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Collateral&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; event&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token boolean"&gt;true&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token keyword"&gt;if&lt;/span&gt; action &lt;span class="token operator"&gt;==&lt;/span&gt; &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;withdraw_collateral&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;Actions&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;add&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Action&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Collateral&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; event&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token boolean"&gt;false&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token keyword"&gt;if&lt;/span&gt; action &lt;span class="token operator"&gt;==&lt;/span&gt; &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;borrow&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;Actions&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;add&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Action&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Borrow&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; event&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token boolean"&gt;true&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token keyword"&gt;if&lt;/span&gt; action &lt;span class="token operator"&gt;==&lt;/span&gt; &lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;soroban&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;repay&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token class-name"&gt;Actions&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;add&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Action&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Borrow&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; event&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token boolean"&gt;false&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We outsourced the database insertion to &lt;code&gt;Actions::add&lt;/code&gt;, which simply extracts the actual amount (blend event&amp;#x27;s data is a tuple, were the first element is the amount), understands whether the amount should be positive or negative, decodes the ScVals to strings and integers, and lastly puts the action in the actions table:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-rust"&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;impl&lt;/span&gt; &lt;span class="token class-name"&gt;Actions&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        env&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;EnvClient&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        action&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Action&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        timestamp&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;u64&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        ledger&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;u32&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        asset&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        amount&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;i128&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        source&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="token keyword"&gt;Self&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; asset &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;address_to_alloc_string&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;from_scval&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;asset&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; source &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token function"&gt;address_to_alloc_string&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;,&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;from_scval&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;source&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;Self&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            action&lt;span class="token punctuation"&gt;:&lt;/span&gt; action &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;u32&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            timestamp&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            ledger&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            asset&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            amount&lt;span class="token punctuation"&gt;:&lt;/span&gt; amount &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;i64&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            source&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;add&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;env&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token class-name"&gt;EnvClient&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; action&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Action&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; event&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;PrettyContractEvent&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; increase&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token keyword"&gt;bool&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;amount&lt;span class="token punctuation"&gt;,&lt;/span&gt; _&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token keyword"&gt;i128&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token keyword"&gt;i128&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;from_scval&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;event&lt;span class="token punctuation"&gt;.&lt;/span&gt;data&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; delta &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;if&lt;/span&gt; increase &lt;span class="token punctuation"&gt;{&lt;/span&gt; amount &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;amount &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token keyword"&gt;let&lt;/span&gt; supply &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;Actions&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            env&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            action&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;reader&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;ledger_timestamp&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;reader&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;ledger_sequence&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            event&lt;span class="token punctuation"&gt;.&lt;/span&gt;topics&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            delta&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            event&lt;span class="token punctuation"&gt;.&lt;/span&gt;topics&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;2&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;put&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;supply&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="data-retrieval-through-a-custom-api"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#data-retrieval-through-a-custom-api" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Data Retrieval Through A Custom API.&lt;/h2&gt;&lt;p&gt;Now that we have sorted out the indexer part, we need to retrieve the data. We could either use directly the graphql API, but that would require decoding the values (or indexing them as XDR and using stellar tooling to decode them). A much faster path is to create an API directly inside the Mercury program. More specifically, we want to allow retrieving all borrow and collateral actions, but also allow to retrieve them by address.&lt;/p&gt;&lt;p&gt;When building an API with Mercury, you have two approaches:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Single function, bigger request object with more variants.&lt;/li&gt;&lt;li&gt;Multiple functions, simpler request object.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Both efficiency and size can generally be ignored for what regards Mercury, but we&amp;#x27;ll take the first approach in this tutorial.&lt;/p&gt;&lt;h3 id="how-do-mercury-apis-work"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#how-do-mercury-apis-work" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;How do Mercury APIs Work?&lt;/h3&gt;&lt;p&gt;Mercury custom APIs are based on additional exported functions in your binary that can be invoked through our cloud infra. The workflow is quite simple:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Define a request object.&lt;/li&gt;&lt;li&gt;Use &lt;code&gt;env.read_request_body()&lt;/code&gt; to get the request.&lt;/li&gt;&lt;li&gt;Perform queries, processing, or any other task.&lt;/li&gt;&lt;li&gt;Return a response through &lt;code&gt;env.conclude(&amp;amp;response)&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;h3 id="defining-the-request-object"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#defining-the-request-object" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Defining the Request Object&lt;/h3&gt;&lt;p&gt;Since we want to retrieve our actions depending on the action type, and potentially have the API specify an address as filter, we define the request simply as:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-rust"&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[derive(Serialize, Deserialize)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;struct&lt;/span&gt; &lt;span class="token class-name type-definition"&gt;Request&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    kind&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Action&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    address&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Option&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;String&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the &lt;code&gt;Action&lt;/code&gt; object is the very same enum we&amp;#x27;re using for the ingestion.&lt;/p&gt;&lt;h3 id="building-the-retrieve-function-api"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#building-the-retrieve-function-api" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Building the retrieve function API.&lt;/h3&gt;&lt;p&gt;We&amp;#x27;ll call our single API function &lt;code&gt;retrieve&lt;/code&gt;, and its task will simply be to query the database applying the request-specified filters:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-rust"&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[no_mangle]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;pub&lt;/span&gt; &lt;span class="token keyword"&gt;extern&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;retrieve&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; env &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;EnvClient&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;empty&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; request&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Request&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;read_request_body&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; actions&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token class-name"&gt;Vec&lt;/span&gt;&lt;span class="token operator"&gt;&amp;lt;&lt;/span&gt;&lt;span class="token class-name"&gt;Actions&lt;/span&gt;&lt;span class="token operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token keyword"&gt;if&lt;/span&gt; &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token class-name"&gt;Some&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;address&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token operator"&gt;=&lt;/span&gt; request&lt;span class="token punctuation"&gt;.&lt;/span&gt;address &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;read_filter&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;column_equal_to&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; request&lt;span class="token punctuation"&gt;.&lt;/span&gt;kind &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;u32&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;column_equal_to&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; address&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;read&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;span class="token keyword"&gt;else&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;read_filter&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;column_equal_to&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; request&lt;span class="token punctuation"&gt;.&lt;/span&gt;kind &lt;span class="token keyword"&gt;as&lt;/span&gt; &lt;span class="token keyword"&gt;u32&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;read&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;conclude&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;actions&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr/&gt;&lt;h1 id="local-testing"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#local-testing" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Local Testing&lt;/h1&gt;&lt;p&gt;Before we can test or deploy, we need to build our program. Assuming that you&amp;#x27;re on the latest &lt;code&gt;mercury-cli&lt;/code&gt; release:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-bash"&gt;&lt;span class="code-line"&gt;mercury-cli build &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Zephyr programs can also be locally tested by fabricating artificial inputs such as contract events or other ledger transition data. For example, we can test craft collateral deposits and withdrawals as follows:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-rust"&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[cfg(test)]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;mod&lt;/span&gt; &lt;span class="token namespace module-declaration"&gt;test&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;use&lt;/span&gt; &lt;span class="token namespace"&gt;ledger_meta_factory&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;TransitionPretty&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;use&lt;/span&gt; &lt;span class="token namespace"&gt;stellar_xdr&lt;span class="token punctuation"&gt;::&lt;/span&gt;next&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token punctuation"&gt;{&lt;/span&gt;&lt;span class="token class-name"&gt;Hash&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Int128Parts&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;Limits&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;ScSymbol&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;ScVec&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;WriteXdr&lt;/span&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;use&lt;/span&gt; &lt;span class="token namespace"&gt;zephyr_sdk&lt;span class="token punctuation"&gt;::&lt;/span&gt;testutils&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;TestHost&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;add_collateral&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;transition&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; &lt;span class="token class-name"&gt;TransitionPretty&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        transition&lt;span class="token punctuation"&gt;.&lt;/span&gt;inner&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;set_sequence&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token number"&gt;2000&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        transition &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;contract_event&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token string"&gt;&amp;quot;CBP7NO6F7FRDHSOFQBT2L2UWYIZ2PU76JKVRYAQTG3KZSQLYAOKIF2WB&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token property macro"&gt;vec!&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;ScSymbol&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;supply_collateral&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;try_into&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Address&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token namespace"&gt;stellar_xdr&lt;span class="token punctuation"&gt;::&lt;/span&gt;next&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;ScAddress&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Contract&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Hash&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;8&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Address&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token namespace"&gt;stellar_xdr&lt;span class="token punctuation"&gt;::&lt;/span&gt;next&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;ScAddress&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Contract&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Hash&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Vec&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Some&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;ScVec&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token property macro"&gt;vec!&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token constant"&gt;I128&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Int128Parts&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    hi&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    lo&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1000000000&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token constant"&gt;I128&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Int128Parts&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    hi&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    lo&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;500000000&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;try_into&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;withdraw_collateral&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;transition&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; &lt;span class="token class-name"&gt;TransitionPretty&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        transition&lt;span class="token punctuation"&gt;.&lt;/span&gt;inner&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;set_sequence&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token number"&gt;2010&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        transition &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;contract_event&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token string"&gt;&amp;quot;CBP7NO6F7FRDHSOFQBT2L2UWYIZ2PU76JKVRYAQTG3KZSQLYAOKIF2WB&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token property macro"&gt;vec!&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Symbol&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;ScSymbol&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;withdraw_collateral&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;try_into&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Address&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token namespace"&gt;stellar_xdr&lt;span class="token punctuation"&gt;::&lt;/span&gt;next&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;ScAddress&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Contract&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Hash&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;8&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Address&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token namespace"&gt;stellar_xdr&lt;span class="token punctuation"&gt;::&lt;/span&gt;next&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class="token class-name"&gt;ScAddress&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Contract&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Hash&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;span class="token number"&gt;32&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token class-name"&gt;Vec&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Some&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;ScVec&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token property macro"&gt;vec!&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token constant"&gt;I128&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Int128Parts&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    hi&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    lo&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;1000000000&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token class-name"&gt;ScVal&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token constant"&gt;I128&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token class-name"&gt;Int128Parts&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    hi&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                    lo&lt;span class="token punctuation"&gt;:&lt;/span&gt; &lt;span class="token number"&gt;500000000&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;                &lt;span class="token punctuation"&gt;}&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;try_into&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;            &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token comment"&gt;// ... more code below&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then use these functions within the actual test to verify that our program is processing data as intended:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-rust"&gt;&lt;span class="code-line"&gt;&lt;span class="token attr-name attribute"&gt;#[tokio::test]&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token keyword"&gt;async&lt;/span&gt; &lt;span class="token keyword"&gt;fn&lt;/span&gt; &lt;span class="token function function-definition"&gt;withdraw&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;span class="token punctuation"&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; env &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;TestHost&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;default&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; program &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;new_program&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;./target/wasm32-unknown-unknown/release/blend_ybx.wasm&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token comment"&gt;// Below is a test connection string. Feel free to use this or other connection strings.&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; db &lt;span class="token operator"&gt;=&lt;/span&gt; env&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;database&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;postgres://postgres:postgres@localhost:5432&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    db&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;load_table&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token property macro"&gt;vec!&lt;/span&gt;&lt;span class="token punctuation"&gt;[&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;ledger&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;asset&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;]&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;        &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token keyword"&gt;await&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token property macro"&gt;assert_eq!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;db&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;get_rows_number&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token keyword"&gt;await&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; &lt;span class="token keyword"&gt;mut&lt;/span&gt; empty &lt;span class="token operator"&gt;=&lt;/span&gt; &lt;span class="token class-name"&gt;TransitionPretty&lt;/span&gt;&lt;span class="token punctuation"&gt;::&lt;/span&gt;&lt;span class="token function"&gt;new&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    program&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;set_transition&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;empty&lt;span class="token punctuation"&gt;.&lt;/span&gt;inner&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; invocation &lt;span class="token operator"&gt;=&lt;/span&gt; program&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;invoke_vm&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;on_close&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token keyword"&gt;await&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token property macro"&gt;assert!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;invocation&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;is_ok&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; inner_invocation &lt;span class="token operator"&gt;=&lt;/span&gt; invocation&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token property macro"&gt;assert!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;inner_invocation&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;is_ok&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token property macro"&gt;assert_eq!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;db&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;get_rows_number&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token keyword"&gt;await&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token comment"&gt;// After deposit&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token function"&gt;add_deposit&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; empty&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    program&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;set_transition&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;empty&lt;span class="token punctuation"&gt;.&lt;/span&gt;inner&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;clone&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; invocation &lt;span class="token operator"&gt;=&lt;/span&gt; program&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;invoke_vm&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;on_close&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token keyword"&gt;await&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token property macro"&gt;assert!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;invocation&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;is_ok&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; inner_invocation &lt;span class="token operator"&gt;=&lt;/span&gt; invocation&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token property macro"&gt;assert!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;inner_invocation&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;is_ok&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token property macro"&gt;assert_eq!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;db&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;get_rows_number&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token keyword"&gt;await&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token number"&gt;1&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token comment"&gt;// After deposit + withdrawal&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token function"&gt;add_withdraw&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="token keyword"&gt;mut&lt;/span&gt; empty&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    program&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;set_transition&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;empty&lt;span class="token punctuation"&gt;.&lt;/span&gt;inner&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; invocation &lt;span class="token operator"&gt;=&lt;/span&gt; program&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;invoke_vm&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;&amp;quot;on_close&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token keyword"&gt;await&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token property macro"&gt;assert!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;invocation&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;is_ok&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token keyword"&gt;let&lt;/span&gt; inner_invocation &lt;span class="token operator"&gt;=&lt;/span&gt; invocation&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token property macro"&gt;assert!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;inner_invocation&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;is_ok&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt; &lt;/span&gt;&lt;span class="code-line"&gt;    &lt;span class="token property macro"&gt;assert_eq!&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;db&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;get_rows_number&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token number"&gt;0&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token keyword"&gt;await&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;unwrap&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;,&lt;/span&gt; &lt;span class="token number"&gt;3&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;     &lt;/span&gt;&lt;span class="code-line"&gt;    db&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;close&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token keyword"&gt;await&lt;/span&gt; &lt;/span&gt;&lt;span class="code-line"&gt;&lt;span class="token punctuation"&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that testing zephyr programs requires a postgres setup and a valid db connection string as the code comment above the db setup hints.&lt;/p&gt;&lt;p&gt;For more information about testing and a complete walkthrough you can check out the &lt;a target="_blank" rel="noopener noreferrer" href="https://docs.mercurydata.app/zephyr-full-customization/learn/get-started-set-up-and-manage-the-project/local-testing"&gt;dedicated docs section&lt;/a&gt;.&lt;/p&gt;&lt;h1 id="deploying"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#deploying" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Deploying&lt;/h1&gt;&lt;p&gt;To deploy the program on mainnet, use the mercury cli:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-js"&gt;&lt;span class="code-line"&gt;mercury&lt;span class="token operator"&gt;-&lt;/span&gt;cli &lt;span class="token operator"&gt;--&lt;/span&gt;jwt &lt;span class="token string"&gt;&amp;quot;$MERCURY_JWT&amp;quot;&lt;/span&gt; &lt;span class="token operator"&gt;--&lt;/span&gt;mainnet &lt;span class="token boolean"&gt;true&lt;/span&gt; deploy &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Assuming that the JWT is correct, you should see a successful deployment message.&lt;/p&gt;&lt;p&gt;You can monitor and pause your program in the &lt;a target="_blank" rel="noopener noreferrer" href="https://main.mercurydata.app/custom-ingestion"&gt;dedicated page&lt;/a&gt; in the Mercury webapp.&lt;/p&gt;&lt;h1 id="catching-up"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#catching-up" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Catching Up&lt;/h1&gt;&lt;p&gt;Since our indexer is event-based, we can rely on Mercury&amp;#x27;s cloud infra to execute catchups that would take hours with stellar core in minutes. For example, for the YieldBlox pool we can use a scoped catchup to only catchup with &lt;code&gt;borrow&lt;/code&gt;, &lt;code&gt;repay&lt;/code&gt;, &lt;code&gt;supply_collateral&lt;/code&gt; and &lt;code&gt;withdraw_collateral&lt;/code&gt; events:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-bash"&gt;&lt;span class="code-line"&gt;mercury-cli &lt;span class="token variable parameter"&gt;--jwt&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;&lt;span class="token variable"&gt;$MERCURY_JWT&lt;/span&gt;&amp;quot;&lt;/span&gt; &lt;span class="token variable parameter"&gt;--mainnet&lt;/span&gt; &lt;span class="token boolean"&gt;true&lt;/span&gt; catchup &lt;span class="token variable parameter"&gt;--contracts&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;CBP7NO6F7FRDHSOFQBT2L2UWYIZ2PU76JKVRYAQTG3KZSQLYAOKIF2WB&amp;quot;&lt;/span&gt; &lt;span class="token variable parameter"&gt;--topic1s&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;AAAADwAAABFzdXBwbHlfY29sbGF0ZXJhbAAAAA==&amp;quot;&lt;/span&gt; &lt;span class="token variable parameter"&gt;--topic1s&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;AAAADwAAABN3aXRoZHJhd19jb2xsYXRlcmFsAA==&amp;quot;&lt;/span&gt; &lt;span class="token variable parameter"&gt;--topic1s&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;AAAADwAAAAZib3Jyb3cAAA==&amp;quot;&lt;/span&gt; &lt;span class="token variable parameter"&gt;--topic1s&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;AAAADwAAAAVyZXBheQAAAA==&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will return us a catchup id, allowing us to check the status of the catchup with:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-bash"&gt;&lt;span class="code-line"&gt;&lt;span class="token function"&gt;curl&lt;/span&gt; https://mainnet.mercurydata.app/catchup/ID &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Furthermore, if we added logs in our program, we can see them under the &amp;quot;User Logs&amp;quot; section in the Mercury webapp.&lt;/p&gt;&lt;p&gt;Once the catchup is complete and the program resumes its ingestion work, it&amp;#x27;s time to test out the API and start retrieving the data.&lt;/p&gt;&lt;hr/&gt;&lt;h1 id="about-public-functions"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#about-public-functions" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;About public functions&lt;/h1&gt;&lt;p&gt;Before we get to the result, I&amp;#x27;ll briefly mention public zephyr funcitons which are one of the newest features that were introduced in Mercury. Since every invocation to a Mercury function, such as for example the &lt;code&gt;retrieve&lt;/code&gt; function spins up a new VM, and executes arbitrary code, such functions are guarded behind an authentication mechanism that allows only the program&amp;#x27;s owner to execute such functions. However, some other functions such as the retrieve function that are meant for the public can now be opened and invoked by anyone if the owner sets the function within the program&amp;#x27;s public functions.&lt;/p&gt;&lt;p&gt;To set your program&amp;#x27;s public funcitons, you can use the Mercury API:&lt;/p&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-js"&gt;&lt;span class="code-line"&gt;curl &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token constant"&gt;X&lt;/span&gt; &lt;span class="token constant"&gt;POST&lt;/span&gt; &lt;span class="token property literal-property"&gt;https&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;mainnet&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token property-access"&gt;mercurydata&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token property-access"&gt;app&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;zephyr&lt;span class="token operator"&gt;/&lt;/span&gt;pubfunctions &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token constant"&gt;H&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;Authorization: Bearer $MERCURY_JWT&amp;quot;&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token constant"&gt;H&lt;/span&gt; &lt;span class="token string"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;d &lt;span class="token string"&gt;&amp;#x27;{&amp;quot;public&amp;quot;:[&amp;quot;retrieve&amp;quot;]}&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;More information about public functions can be found in the &lt;a target="_blank" rel="noopener noreferrer" href="https://docs.mercurydata.app/zephyr-full-customization/learn/custom-apis/general-concepts#making-functions-public-and-a-note-on-auth"&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;hr/&gt;&lt;h1 id="result"&gt;&lt;a href="https://blog.xycloo.com/blog/indexing-blend-ybx-pool#result" aria-hidden="true" tabindex="-1"&gt;&lt;span class="icon icon-link"&gt;&lt;/span&gt;&lt;/a&gt;Result&lt;/h1&gt;&lt;p&gt;We can now call the (now public) &lt;code&gt;retrieve&lt;/code&gt; function with the various request combinations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;All collateral operations:&lt;/li&gt;&lt;/ul&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-js"&gt;&lt;span class="code-line"&gt;curl &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token constant"&gt;X&lt;/span&gt; &lt;span class="token constant"&gt;POST&lt;/span&gt; &lt;span class="token property literal-property"&gt;https&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;mainnet&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token property-access"&gt;mercurydata&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token property-access"&gt;app&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;zephyr&lt;span class="token operator"&gt;/&lt;/span&gt;execute&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token number"&gt;30&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token constant"&gt;H&lt;/span&gt; &lt;span class="token string"&gt;&amp;#x27;Content-Type: application/json&amp;#x27;&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;d &lt;span class="token string"&gt;&amp;#x27;{&amp;quot;mode&amp;quot;:{&amp;quot;Function&amp;quot;: {&amp;quot;fname&amp;quot;: &amp;quot;retrieve&amp;quot;, &amp;quot;arguments&amp;quot;: &amp;quot;{\&amp;quot;kind\&amp;quot;: \&amp;quot;Collateral\&amp;quot;}&amp;quot;}}}&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Collateral operations for a certain user (in this case we randomly chose &lt;code&gt;GDJSH2NU2WF6J4P5DL4522DUCABWSTZOKFQ7BHBCFYQ3QKC6FRYWP6OL&lt;/code&gt;):&lt;/li&gt;&lt;/ul&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-js"&gt;&lt;span class="code-line"&gt;curl &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token constant"&gt;X&lt;/span&gt; &lt;span class="token constant"&gt;POST&lt;/span&gt; &lt;span class="token property literal-property"&gt;https&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;mainnet&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token property-access"&gt;mercurydata&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token property-access"&gt;app&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;zephyr&lt;span class="token operator"&gt;/&lt;/span&gt;execute&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token number"&gt;30&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token constant"&gt;H&lt;/span&gt; &lt;span class="token string"&gt;&amp;#x27;Content-Type: application/json&amp;#x27;&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;d &lt;span class="token string"&gt;&amp;#x27;{&amp;quot;mode&amp;quot;:{&amp;quot;Function&amp;quot;: {&amp;quot;fname&amp;quot;: &amp;quot;retrieve&amp;quot;, &amp;quot;arguments&amp;quot;: &amp;quot;{\&amp;quot;kind\&amp;quot;: \&amp;quot;Collateral\&amp;quot;, \&amp;quot;address\&amp;quot;: \&amp;quot;GDJSH2NU2WF6J4P5DL4522DUCABWSTZOKFQ7BHBCFYQ3QKC6FRYWP6OL\&amp;quot;}&amp;quot;}}}&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;All borrow/repay operations:&lt;/li&gt;&lt;/ul&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-js"&gt;&lt;span class="code-line"&gt;curl &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token constant"&gt;X&lt;/span&gt; &lt;span class="token constant"&gt;POST&lt;/span&gt; &lt;span class="token property literal-property"&gt;https&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;mainnet&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token property-access"&gt;mercurydata&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token property-access"&gt;app&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;zephyr&lt;span class="token operator"&gt;/&lt;/span&gt;execute&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token number"&gt;30&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token constant"&gt;H&lt;/span&gt; &lt;span class="token string"&gt;&amp;#x27;Content-Type: application/json&amp;#x27;&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;d &lt;span class="token string"&gt;&amp;#x27;{&amp;quot;mode&amp;quot;:{&amp;quot;Function&amp;quot;: {&amp;quot;fname&amp;quot;: &amp;quot;retrieve&amp;quot;, &amp;quot;arguments&amp;quot;: &amp;quot;{\&amp;quot;kind\&amp;quot;: \&amp;quot;Borrow\&amp;quot;}&amp;quot;}}}&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Borrow/repay operations for a certain user (in this case we randomly chose &lt;code&gt;GDJSH2NU2WF6J4P5DL4522DUCABWSTZOKFQ7BHBCFYQ3QKC6FRYWP6OL&lt;/code&gt;):&lt;/li&gt;&lt;/ul&gt;&lt;div class="relative"&gt;&lt;pre&gt;&lt;code class="code-highlight language-js"&gt;&lt;span class="code-line"&gt;curl &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token constant"&gt;X&lt;/span&gt; &lt;span class="token constant"&gt;POST&lt;/span&gt; &lt;span class="token property literal-property"&gt;https&lt;/span&gt;&lt;span class="token operator"&gt;:&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;mainnet&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token property-access"&gt;mercurydata&lt;/span&gt;&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token property-access"&gt;app&lt;/span&gt;&lt;span class="token operator"&gt;/&lt;/span&gt;zephyr&lt;span class="token operator"&gt;/&lt;/span&gt;execute&lt;span class="token operator"&gt;/&lt;/span&gt;&lt;span class="token number"&gt;30&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;&lt;span class="token constant"&gt;H&lt;/span&gt; &lt;span class="token string"&gt;&amp;#x27;Content-Type: application/json&amp;#x27;&lt;/span&gt; &lt;span class="token operator"&gt;-&lt;/span&gt;d &lt;span class="token string"&gt;&amp;#x27;{&amp;quot;mode&amp;quot;:{&amp;quot;Function&amp;quot;: {&amp;quot;fname&amp;quot;: &amp;quot;retrieve&amp;quot;, &amp;quot;arguments&amp;quot;: &amp;quot;{\&amp;quot;kind\&amp;quot;: \&amp;quot;Borrow\&amp;quot;, \&amp;quot;address\&amp;quot;: \&amp;quot;GDJSH2NU2WF6J4P5DL4522DUCABWSTZOKFQ7BHBCFYQ3QKC6FRYWP6OL\&amp;quot;}&amp;quot;}}}&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link rel="enclosure" type="image/png" href="https://blog.xycloo.com/static/images/twitter-card.png"/>
  </entry>
</feed>
