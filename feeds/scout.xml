<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
  <title type="text">Stories by CoinFabrik on Medium</title>
  <link rel="alternate" type="text/html" href="https://medium.com/@coinfabrik?source=rss-a38d3b8e1f1b------2"/>
  <link rel="self" type="application/atom+xml" href="http://10.0.0.124:3044/?action=display&amp;bridge=FeedFinderBridge&amp;url=https%3A%2F%2Fmedium.com%2F%40coinfabrik&amp;strip=on&amp;_cache_timeout=3600&amp;format=Atom"/>
  <icon>https://cdn-images-1.medium.com/fit/c/150/150/1*lDQSJTXspfxESSY9B8IpnA.png</icon>
  <logo>https://cdn-images-1.medium.com/fit/c/150/150/1*lDQSJTXspfxESSY9B8IpnA.png</logo>
  <id>http://10.0.0.124:3044/?action=display&amp;bridge=FeedFinderBridge&amp;url=https%3A%2F%2Fmedium.com%2F%40coinfabrik&amp;strip=on&amp;_cache_timeout=3600&amp;format=Atom</id>
  <updated>2025-04-11T22:02:53+00:00</updated>
  <author>
    <name>RSS-Bridge</name>
  </author>
  <entry>
    <title type="html">Unlocking Optimizations with eth_call on Ethereum</title>
    <published>2025-03-28T13:42:58+00:00</published>
    <updated>2025-03-28T13:42:58+00:00</updated>
    <id>https://blog.blockmagnates.com/unlocking-optimizations-with-eth-call-on-ethereum-7df8ba639f22?source=rss-a38d3b8e1f1b------2</id>
    <link rel="alternate" type="text/html" href="https://blog.blockmagnates.com/unlocking-optimizations-with-eth-call-on-ethereum-7df8ba639f22?source=rss-a38d3b8e1f1b------2"/>
    <author>
      <name>CoinFabrik</name>
    </author>
    <content type="html">Ethereum eth_call for optimizationHow smart contract simulations can give you an¬†edgeeth_call is widely used to read smart contract data without altering state‚Ää‚Äî‚Ääbut that‚Äôs just the surface. In our latest article, we explore how this JSON-RPC method can be strategically used to simulate contract execution paths, analyze gas usage, and optimize smart contract interactions‚Ää‚Äî‚Ääall without spending a single¬†gwei.Key takeaways:Simulate without cost: Run as many eth_calls as needed to analyze behavior and execution costs off-chain.Optimize smart contracts: Test different input parameters to identify more efficient (and cheaper) execution paths.Understand behavior: Use eth_call to reverse-engineer logic, revealing how contracts handle different scenarios.Mitigate risk: Developers should audit which functions are exposed and what execution data might be leaked unintentionally.Not an exploit, but close: These simulations can offer real-world advantages in MEV, trading, and gas-sensitive applications.üß† Whether you‚Äôre writing DeFi code, building bots, or securing your contracts, mastering eth_call is a¬†must.üëâ Read the full article on our blog: https://www.coinfabrik.com/blog/exploiting-eth_call-for-optimization-purposes/Unlocking Optimizations with eth_call on Ethereum was originally published in Block Magnates on Medium, where people are continuing the conversation by highlighting and responding to this story.</content>
  </entry>
  <entry>
    <title type="html">The Confidence Cyclope</title>
    <published>2024-11-13T21:29:24+00:00</published>
    <updated>2024-11-13T21:29:24+00:00</updated>
    <id>https://medium.com/@coinfabrik/the-confidence-cyclope-47c50123cd78?source=rss-a38d3b8e1f1b------2</id>
    <link rel="alternate" type="text/html" href="https://medium.com/@coinfabrik/the-confidence-cyclope-47c50123cd78?source=rss-a38d3b8e1f1b------2"/>
    <author>
      <name>CoinFabrik</name>
    </author>
    <content type="html">Are you eager to launch your breakthrough project or feature as soon as possible? You‚Äôre racing to complete the code and perform final integration tests and you‚Äôre close to having your valuable product ready for your community, right?Let me keep you away from the claws of the ‚ÄúConfidence Cyclops‚Äù by checking a few things that each cyclopean eye is looking¬†for.Security EyeIf your platform includes smart contracts, have they been audited? How do you synchronize your delivery timelines with audit timelines? Are the contracts new or do they have new features? If so, has the audit team reviewed these contracts previously, allowing for a faster audit?Has your platform undergone a security review or penetration test before? Did it assess both your Web2 and Web3 components?Have you considered establishing a bug bounty¬†program?Technical EyeDo your unit, integration, and end-to-end tests cover the main functionalities? Do they test both happy and unhappy paths? Has any high-demand module been stress-tested, and its performance checked?Are you aware of how good is your test coverage?Are you creating APIs and/or SDKs? Do they include detailed explanations for exposed functions and working examples? Are they easy to use? Do they strike the right balance between versatility and ease of¬†use?Do you have public repositories? Do they include clear, high-level explanations in their READMEs, along with installation steps, test execution procedures, licensing information, and contribution guidelines?Are you using the most appropriate test framework or documentation tools? Do you have time to explore the best¬†options?Have you created and maintained local test environments, devnet, and testnet environments? Are they sufficiently representative of¬†mainnet?Does your CI/CD pipeline include tests to ensure nothing breaks when a new feature is¬†added?Are you using Dockerization to streamline environment setup?Community EyeDoes your community have access to a site showcasing your exciting new features, quick-start guides, how-to procedures, conceptual explanations, schematic diagrams, and¬†FAQs?Do you know your community well? Is it clear what types of users you have? Have you considered how to address each group? For example, does a tech investor need the same information as an integration developer or contributor? Is information easy to navigate from high-level overviews to more detailed specifics?Are you maintaining social media channels with the latest updates about your platform?Does your platform have videos explaining your most important features?If you have or plan to have contributors, do you have contributor guidelines? Is the code clear enough? Does it include technical documentation? Is this documentation linked to the code, allowing easy navigation between code, technical docs, and overview¬†docs?Final QuestionLet me ask one last crucial question: If these questions resonate with you, does your team have the skills and time to handle all these¬†tasks?Every company and project is driven by goals and focuses on the ‚Äúcore‚Äù activities that drive success. Often, complementary services are outsourced when the need becomes clear. This approach feels right, as your team should concentrate on building the exciting features that will engage your community with your superb product or platform.In this ecosystem, all projects and companies need to demonstrate serious work to build confidence. Engaging documentation, thorough testing, security checks and a strong digital presence are all key to achieving this.After all, it‚Äôs all about confidence in Web3, isn‚Äôt¬†it?</content>
  </entry>
  <entry>
    <title type="html">Security Auditing Solidity Codebases with GitHub CodeQL</title>
    <published>2024-09-19T11:53:31+00:00</published>
    <updated>2024-09-19T11:53:31+00:00</updated>
    <id>https://medium.com/@coinfabrik/security-auditing-solidity-codebases-with-github-codeql-480110a0bd59?source=rss-a38d3b8e1f1b------2</id>
    <link rel="alternate" type="text/html" href="https://medium.com/@coinfabrik/security-auditing-solidity-codebases-with-github-codeql-480110a0bd59?source=rss-a38d3b8e1f1b------2"/>
    <author>
      <name>CoinFabrik</name>
    </author>
    <content type="html">We researched the state of the art of Solidity static analyzers like Slither from Trail of Bits and Mythril from Consensys. One common issue with static analysis tools is the output, which is normally filled with false positives that should be filtered by an expert and it is time consuming. As a cybersecurity company we have been following CodeQL from the beginning, and we are happy to share these insights for the community. Our project is active and will be available soon. If you are a crypto skeptic jump to the¬†end.CodeQL is a powerful semantic code analysis engine that allows you to query codebases for vulnerabilities and bugs. It is available for free for both research purposes and open source projects. CodeQL is a sibling of Datalog, and was created by Semmle who was acquired by GitHub in 2019. GitHub was previously acquired by Microsoft who keep it as an independent entity.The CodeQL approach to Static Analysis is very promising for security tooling, as detectors are modular, easy to write and maintain, and edge cases found may be quickly incorporated into the original queries to improve accuracy and reduce false positives without the need to rethink the logic from scratch. Also, they are surprisingly fast.This is how we built support for Solidity in¬†codeQL:We used this tree-sitter grammar for Solidity (credit to Joran Honig!), as it is well maintained and¬†mature.We adapted CodeQL helper generation scripts (written by the Github team for the Ruby language, as explained in this blog entry) to work with this grammar, creating a language specific database scheme and an extractor for Solidity codebases.To take advantage of the rich expressiveness of CodeQL and be able to write more insightful queries, we construct the following layers on top of the AST auto-generated from the Treesitter grammar:A user-friendly layer of abstraction to expose AST elements (e.g. function definitions, function calls, operators, etc.) with a clean, declarative interface.Create a CFG (Control Flow Graph) and its primitives to allow for reasoning at the control flow¬†level.Support for Dataflow Analysis and Taint Analysis.We currently have more than eight active detectors and are continuously expanding this number. We‚Äôre also actively encouraging the security community to contribute, aiming to enhance the security of the entire blockchain ecosystem.Examples of Issues with¬†SlitherWhen attempting to utilize the intermediate representation, SlithIR to do dataflow analysis we encountered the following bug:Suppose we have this Solidity snippet for a contract called¬†PoC:// SPDX-License-Identifier: MIT pragma solidity ^0.8.0;contract PoC {    constructor() {}    function bug(int256 num) external pure returns (uint256) {        uint256 res = 2;        if (num &amp;gt; 0){             res = 1;        } else if (num &amp;lt; 0) {            res = 0;        }        return res;    }}Running Slither on top, and outputing the SlithIR representation yields:INFO:Printers:Contract PoC        Function PoC.constructor()        Function PoC.bug(int256)                Expression: res = 2                IRs:                        res_1(uint256) := 2(uint256)                Expression: num &amp;gt; 0                IRs:                        TMP_0(bool) = num_1 &amp;gt; 0                        CONDITION TMP_0                Expression: res = 1                IRs:                        res_2(uint256) := 1(uint256)                Expression: num &amp;lt; 0                IRs:                        TMP_1(bool) = num_1 &amp;lt; 0                        CONDITION TMP_1                Expression: res = 0                IRs:                        res_3(uint256) := 0(uint256)                IRs:                        res_4(uint256) := œï([&amp;#39;res_3&amp;#39;, &amp;#39;res_1&amp;#39;])                IRs:                        res_5(uint256) := œï([&amp;#39;res_2&amp;#39;, &amp;#39;res_1&amp;#39;])                Expression: res                IRs:                        RETURN res_5Note the orphaned phi node assigned to¬†res_4.In simple terms, when there is any assignment to a variable declared outside of a conditional in both an IF and an ELSE block, the SSA form of the intermediate representation breaks and we get orphaned phi nodes at the end, thus making it impossible to analyze flow in this scenario. For more information, refer to this issue in the official¬†repo.Why Blockchain Stack Security Matters, Even for Crypto¬†SkepticsThe particular thing about crypto cybersecurity is the closeness of money to hackers, the relatively small smart contract codebases compared to traditional software. One simple example is that if you hack a bank through their web page (without impersonating or scamming someone) you don‚Äôt access the treasury directly. In DeFi apps most hacking events means getting the TVL inside the system. A good list of hacks with their amount is available at https://rekt.news/es/leaderboard/. We can have the position of completely dismiss the Web3 world or take into account that Web3 is a good playground, specially for extrapolating the research in this space to practices in the traditional software¬†world.</content>
  </entry>
  <entry>
    <title type="html">What makes Polkadot different from traditional blockchains?</title>
    <published>2024-09-13T19:36:32+00:00</published>
    <updated>2024-09-13T19:36:32+00:00</updated>
    <id>https://medium.com/@coinfabrik/what-makes-polkadot-different-from-traditional-blockchains-490015b2ad1d?source=rss-a38d3b8e1f1b------2</id>
    <link rel="alternate" type="text/html" href="https://medium.com/@coinfabrik/what-makes-polkadot-different-from-traditional-blockchains-490015b2ad1d?source=rss-a38d3b8e1f1b------2"/>
    <author>
      <name>CoinFabrik</name>
    </author>
    <content type="html">When working with Polkadot, we ask whether it is truly a blockchain. Polkadot is, in fact, a multi-chain network designed to address scalability by facilitating interoperability between different blockchains. Unlike traditional blockchains, which often operate in isolation, Polkadot connects various blockchains, enabling them to share information and resources.Its main chain, the Relay Chain, coordinates and secures parachains, allowing multiple parallel chains to process transactions simultaneously, significantly increasing network throughput. This multi-chain architecture allows Polkadot to handle thousands of transactions per second, overcoming bottlenecks seen in single-chain models like Bitcoin and Ethereum, and supports smart contracts and nearly every other Web3 feature. So yes, technically, it is a blockchain.Scalability Challenges in Traditional BlockchainsPolkadot is designed to address several key challenges in the blockchain space, including:Scalability: Traditional blockchains like Bitcoin and Ethereum struggle with slow transaction speeds and high fees due to limited throughput. Polkadot addresses this by using a multi-chain architecture that allows parallel processing of transactions across multiple chains (parachains), significantly increasing the network‚Äôs capacity to process transactions simultaneously, thereby reducing congestion and lowering¬†fees.Interoperability: Blockchains often operate in isolation, making it difficult to transfer data or assets between them. Polkadot‚Äôs architecture enables seamless cross-chain communication, allowing different blockchains to exchange information and assets without needing complex bridging mechanisms.Security: Polkadot offers shared security across its parachains, meaning all chains benefit from the security provided by the main relay chain. This allows smaller or newer blockchains to remain secure without needing to establish their own extensive security measures.Governance: Polkadot introduces an innovative governance system in which token holders have direct influence on network upgrades and decisions. This system aims to prevent contentious forks (splits in the network) by allowing the community to vote on changes in a democratic and unified¬†manner.Flexibility and Adaptability: Polkadot‚Äôs architecture allows chains to upgrade without needing hard forks. This forkless upgradeability ensures smoother transitions and the continuous evolution of the network without splitting communities.What does Polkadot offer compared to its main competitors?We will conduct a comparative analysis of Polkadot and other traditional blockchains that aim to address the key challenges mentioned above. Our goal is to provide an impartial and objective analysis. It‚Äôs important to understand that each blockchain is designed with a specific purpose, and the technologies discussed here excel at solving the problems they were originally created to address. Let‚Äôs explore how each has performed in practice.Polkadot vs.¬†EthereumPolkadot challenges Ethereum, the leading smart contract platform, by addressing Ethereum‚Äôs scalability issues through processing transactions across multiple chains simultaneously, giving it an advantage. Traditionally, Ethereum faces challenges such as limited throughput, high gas fees, slow scalability improvements, and no native cross-chain communication, relying instead on Layer-2 solutions. While Ethereum has reliable security, its validator sets face centralization issues. Its decentralized governance is slow and inflexible, with upgrades like Ethereum 2.0 requiring significant time and hard¬†forkPolkadot vs. Ethereum and¬†CardanoCardano, known for its academic approach to blockchain development, presents another alternative. Cardano‚Äôs scalability is improving, though it still lags behind leading competitors, as cross-chain communication is planned but not yet fully implemented. Ouroboros, its consensus mechanism, appears secure, and its governance allows token holders to participate. However, voting power remains concentrated among larger stakeholders. Additionally, due to its highly academic approach, the platform tends to be slower in implementing new features compared to other blockchains.Polkadot vs. ChainlinkChainlink provides decentralized oracle services, enabling smart contracts to access real-world data, which blockchains cannot do directly. It allows secure interactions with off-chain data sources, APIs, and payment systems. Unlike Polkadot, which focuses on interoperability and scalability within blockchain networks, Chainlink‚Äôs primary function is to deliver reliable off-chain data to on-chain environments.Chainlink doesn‚Äôt prioritize scalability; its focus is on oracle services, which can connect to any chain but depend on external APIs. It is secure for data feeds but relies on third-party sources. While token holders can vote, oracle node operators hold significant power. A key limitation is that Chainlink cannot deploy smart contracts or create blockchains, making it less adaptable and flexible compared to other platforms. Its strength lies in oracle services, not in being a blockchain framework.Polkadot vs.¬†CosmosCosmos focuses on interoperability and, like Polkadot, allows independent blockchains to communicate with each other via the Inter-Blockchain Communication (IBC) protocol. It uses a hub-and-zone model, where different blockchains (zones) are connected through a central¬†hub.However, independent zones can lead to uneven scalability. IBC only works for Cosmos SDK-based chains, and security is managed per chain, which means smaller chains can be vulnerable. This decentralization may result in fragmentation across zones. Cosmos supports app-specific chains and is easy for new developers due to its modular nature, but each zone must adopt upgrades independently. Cosmos provides an open solution for interoperability, while Polkadot offers a more controlled environment.Polkadot vs. AvalancheAvalanche provides a fast solution and scalability through its unique consensus mechanism. It allows the creation of customizable blockchains called subnets, similar to Polkadot‚Äôs parachains, and focuses on scalability and interoperability within its ecosystem.While Avalanche offers high throughput, congestion can still occur within subnets. Although subnets are interoperable, connecting to external chains via bridges adds complexity. The system is secure but relatively new and less battle-tested.Decentralized governance allows token holders to influence decisions, but, as in many other blockchains, large holders can dominate voting. Customizable subnets offer flexibility, but their implementation requires specialized knowledge, which can present a learning curve for new developers.Polkadot vs. Near¬†ProtocolNEAR is also addressing the scalability challenge through sharding technology, making it an interesting alternative to Polkadot. However, there may be some doubts because it is still young and doesn‚Äôt have as many participants as other blockchains. NEAR‚Äôs focus on scalability, using sharding technology similar to Ethereum 2.0 and Polkadot, positions it as a strong competitor in the high-performance blockchain space.Its consensus mechanism, Nightshade, enables parallel transaction processing, which enhances scalability. Bridges are required to connect non-NEAR chains, but so far, the system has proven to be secure, despite being newer compared to older blockchains. NEAR also has a balanced governance system where token holders vote, though participation can sometimes be low. While it is flexible due to sharding, implementing and developing with this technology adds significant complexity.Polkadot‚Äôs FeaturesPolkadot ‚Äòs parallel processing with parachains enhances scalability, allowing seamless cross-chain communication within the ecosystem. The shared security model across parachains ensures robust protection. Polkadot aims to reduce the influence of large token holders through conviction voting, which increases voting power by locking tokens for longer periods, and adaptive quorum biasing, which adjusts proposal thresholds based on voter turnout. These features, along with flexible delegation, ensure more inclusive and balanced governance. The system is flexible due to parachain customization, and forkless upgrades enable smooth adaptability without splitting communities.Addressing issues: Why Polkadot¬†MattersWe analyzed scalability, interoperability, security, governance, flexibility, and adaptability. While most blockchains have provided acceptable support ‚ûñ, others have failed or handled some issues ineffectively ‚ùå. However, Polkadot has consistently proven to be reliable in most areas, providing substantial and strong support¬†‚úîÔ∏è.In a nutshell, Polkadot‚Äôs architecture allows multiple blockchains to operate independently while being governed under a unified network. This design facilitates interoperability and scalability, offering a more flexible and upgradeable platform compared to traditional blockchains, which often require hard forks for significant updates.Author: Ariel Sanchez mail: ariel.sanchez@coinfabrik.com</content>
  </entry>
  <entry>
    <title type="html">Backdoors for governance: Are they good or completely wrong?</title>
    <published>2024-09-09T19:52:37+00:00</published>
    <updated>2024-09-09T19:52:37+00:00</updated>
    <id>https://medium.com/@coinfabrik/backdoors-for-governance-are-they-good-or-completely-wrong-01b8a3e03bd2?source=rss-a38d3b8e1f1b------2</id>
    <link rel="alternate" type="text/html" href="https://medium.com/@coinfabrik/backdoors-for-governance-are-they-good-or-completely-wrong-01b8a3e03bd2?source=rss-a38d3b8e1f1b------2"/>
    <author>
      <name>CoinFabrik</name>
    </author>
    <content type="html">Backdoors for governance: Are they good or completely wrong?First, let‚Äôs revisit what governance means in DeFi. Governance relies on automatic mechanisms to update the behavior of a DeFi platform in a decentralized way (I‚Äôm considering both on-chain and off-chain components, so I refer to a platform rather than just a protocol). This is typically implemented via smart contracts. Users discuss improvement proposals and vote on them according to predefined rules, and the chosen proposals are implemented to achieve the desired new behavior.But what are backdoors in the context of governance? They are mechanisms that bypass the governance process to change the behavior of a DeFi platform. One might ask: if a governance system is already in place, why use a backdoor? Typically, governance processes take time‚Ää‚Äî‚Äätime to discuss proposals, create artifacts for each proposal, conduct voting, etc-. However, sometimes changes need to be made more¬†quickly.For example, what if an exploit is identified that is draining funds from the platform? There may not be time to vote on stopping or fixing the exploit; you need to react immediately. In situations like these, backdoors come into¬†play.Now, the interesting discussion: we know that urgent situations happen, and we need a fast response. So, why not be prepared for¬†that?This preface sets the context for answering the following question: Why don‚Äôt we rethink our governance to avoid the need for backdoors?Here are some¬†ideas:When an urgent situation is detected, the first step is to stop what is causing the problem. This could mean pausing one component, a set of components, or the entire platform. We could start by pausing the entire platform, then gradually restart unaffected parts while leaving the vulnerable component offline until the problem is resolved.It‚Äôs important to consider that fixing issues is not always easy and can sometimes be time-consuming. You could implement temporary fixes to buy more time for a definitive solution.Do all changes require the same rules for adoption? Is adding a new feature the same as changing a single parameter? Certainly not. Simpler and faster governance rules should be in place. Therefore, governance could have an ‚Äòexpress mode‚Äô to handle these situations.We could anticipate suspicious situations and create monitoring systems to detect them. As soon as a monitor detects an issue, it could pause the affected component and raise an¬†alert.Don‚Äôt forget to communicate the urgency to your community, providing constant updates on the progress of clarifying the causes, next steps, resolution, and expected timelines.Providing your governance with mechanisms for pausing operations, quickly implementing changes, preventing issues, and maintaining good communication will show your community that your platform is prepared for the worst in a world that is always evolving and growing in complexity.And yes: ‚ÄúBackdoors‚Äù are¬†bad.‚ÄùAuthor: Cristian Paz MezzanoMail: cristian.paz.mezzano@coinfabrik.com</content>
  </entry>
  <entry>
    <title type="html">How to Fix Solana?</title>
    <published>2024-08-05T14:27:02+00:00</published>
    <updated>2024-08-05T14:27:02+00:00</updated>
    <id>https://medium.com/@coinfabrik/how-to-fix-solana-8c140d0af532?source=rss-a38d3b8e1f1b------2</id>
    <link rel="alternate" type="text/html" href="https://medium.com/@coinfabrik/how-to-fix-solana-8c140d0af532?source=rss-a38d3b8e1f1b------2"/>
    <author>
      <name>CoinFabrik</name>
    </author>
    <content type="html">Why has Solana crashed so much if its infrastructure has constantly improved?There has been much discussion about the latest Solana crash, and it‚Äôs worth exploring the reasons. Beyond the fact that these drops have been proven to be temporary in the past, Solana currently has a growing community, and SOL continues to be among the top 5 most chosen cryptocurrencies in the market. A year ago, when we started working with Solana, we explained some of the challenges inherent to the blockchain and began actively working to solve them. However, there have been setbacks. We still can‚Äôt ensure there is a single reason for Solana‚Äôs volatility, as there have been isolated Solana network outages over the¬†years.Network Outages and SolutionsA few months ago, a post-mortem report from Solana revealed that the recent network outage, which lasted five hours, was caused by a previously identified bug. This bug, an infinite loop, occurred in the Just-in-Time (JIT) compilation cache, affecting the recompilation of old programs and monopolizing network resources. Validators had to restart the network to solve the issue. This was the sixth major outage since Solana‚Äôs¬†launch.Solana co-founder Anatoly Yakovenko addressed concerns about network outages, noting that a ‚Äúlong-term fix‚Äù was in development. The outages, caused by software bugs and artificial traffic, such as the crash on April 30, were attributed to bots invading popular NFT minting platforms. The solution in this case is being pursued by Jump Crypto and the Solana Foundation. They are working together on a project called Firedancer, which aims to boost Solana‚Äôs efficiency. To incentivize developers to find and fix any bugs, they‚Äôve launched a bug bounty program with up to $1 million in rewards. This program, managed by Immunefi, started on July 10, 2024, and runs for 42 days‚Äã therefore the bug bounty program has 22 days left hence you still have time to participate.How is this going to solve Solana‚Äôs network instability?By adding a new client, Solana can improve scalability and enhance validation options. A Solana validator client allows nodes to validate transactions and propose new blocks. Using PoS and PoH for transaction synchronization, Solana can process up to 65,000 transactions per second. Firedancer, developed in C++, is a new validator client that enhances processing capacity and supports sharding, which improves blockchain scalability by splitting it into smaller parts, allowing parallel transaction processing, thus boosting speed and efficiency, achieving over 1 million transactions per second in¬†tests.Reasons for Solana‚Äôs Financial VolatilitySo, if network instability is not really the problem, how do we explain Solana‚Äôs¬†crash?Recently, Solana‚Äôs price has followed the general downward trend of the crypto market. This decline was influenced by external factors in recent months, such as Bitcoin sales by the German government and the repayments from the Mt. Gox exchange, as well as the FTT collapse and turmoil following the FTX exchange. These events have raised market concerns. The BTC drop also affected other cryptocurrencies like ETH and BNB. In fact, the impact on Solana was less than on other cryptocurrencies, and its price continues to recover consistently. Additionally, we have seen support and interest, such as the return of DeGods and yOOts to Solana a few months ago, which appreciated those NFTs. Thus, we can conclude that Solana has experienced significant drops due to both network outages and market variations.How to Fix These¬†Issues?As we can see in both the cases of interruptions and the price variations the solution is to get involved, whether by investing or strengthening the ecosystem‚Äôs security. The Solana Network has proven to be solid enough, the trend for SOL is upward. In the last month, the price of SOL has shown a significant growth reaching more than $ 180 and representing an increase of more than 26% from the $ 142 at the beginning of the month. This sustained growth added to a previous 20% totaling a 45% increase over the last 90 days is showing so far a fair performance in the cryptocurrency market despite its volatility. So far the community has responded to each problem with real solutions and interesting economic incentives for both developers and various investors. Solana doesn‚Äôt seem to need any fixing; it survives on its¬†own.Disclaimer: The information provided is for informational and educational purposes, based on available data and technical analysis. Readers should conduct their own research and consult a financial advisor before making any investment decisions related to cryptocurrencies.</content>
  </entry>
  <entry>
    <title type="html">Libraries in Solidity</title>
    <published>2024-08-01T13:21:25+00:00</published>
    <updated>2024-08-01T13:21:25+00:00</updated>
    <id>https://medium.com/@coinfabrik/libraries-in-solidity-206e3d8029ec?source=rss-a38d3b8e1f1b------2</id>
    <link rel="alternate" type="text/html" href="https://medium.com/@coinfabrik/libraries-in-solidity-206e3d8029ec?source=rss-a38d3b8e1f1b------2"/>
    <author>
      <name>CoinFabrik</name>
    </author>
    <content type="html">What is a¬†Library?We can think of libraries as contracts with reusable blocks of code. The key difference is that libraries have no storage and cannot store ether. The purpose of libraries is to avoid unnecessary code repetition, allowing developers to reuse external code. By reusing code, libraries minimize the amount of repeated logic that needs to be deployed on-chain, resulting in lower gas fees. Libraries can also be embedded directly into contracts as internal functions, further optimizing gas usage and execution speed.The possibility to be used by different contracts without needing redeployment can increase the security of our contracts, for example by using tested libraries such as those provided by OpenZeppelin. Using these well-audited libraries reduce the risk of vulnerabilities in common functionalities, enabling developers to focus on their specific application logic.The use of libraries also makes the developer‚Äôs job easier, as it makes the code simpler and cleaner, allowing both the development team and other developers to understand it better. This simplicity stems from code reuse, which reduces redundancy and enhances readability.How visibility affect Library functionsLibrary functions accept the same visibility modifiers as regular contracts. However, when developing libraries, it‚Äôs crucial to understand the distinctions between them, as this differences will affect both deployment and execution. This flexibility in function visibility enables developers to precisely tailor the accessibility and behavior of library functions to meet their specific requirements.CommentLibraries with external functions are deployed independently. This means that contracts use them via delegatecall, executing the library ‚Äòs logic within the context of the calling contract and allowing the library to access and modify the storage of the contract. Although this generates a slightly higher gas cost, it can be more efficient when using the library for multiple contracts.Public functions in libraries behave similarly to external ones, allowing calls from outside the library and requiring separate deployment. In contrast, private functions are only accessible within the library itself, preventing direct access from contracts using the¬†library.On the other hand, libraries with internal functions are included directly in the calling contract at compile time, as if the library were part of the contract itself. This causes a lower cost of gas in the calls, but increases the cost and size of the deployment.Contracts utilizing libraries that contain both internal and external functions will have a hybrid structure: internal functions will be directly embedded, while external functions will still be deployed as separate contracts. This mixed approach can offer strategic benefits in certain situations. For example, developers can designate frequently used, simple functions as internal to optimize gas efficiency, while more complex or less frequently accessed functions can be made external to manage contract size effectively. This flexibility allows for a careful balance between performance optimization and code organization.delegatecall is a low-level function that allows one contract to call another contract and run its code within the context of the calling¬†contractHow to implement a¬†libraryTo understand the implementation let‚Äôs look at a simple example in parts. This is a basic library with a function that receives two values and adds them together./AddLibrary.solpragma solidity ^0.8.9;library AddLibrary {    function add(uint a, uint b) public pure returns (uint){        return a + b;    }}To use the library in our contract, we must first import it. Once imported, we can utilize its functions and structures within our contract¬†code./Add.solpragma solidity ^0.8.9;import &amp;quot;./AddLibrary.sol&amp;quot;;contract Add {    function add(uint a, uint b) public pure returns (uint256){        return AddLibrary.add(a, b);    }}In Solidity, the calling contract can modify its storage while executing library code. This is possible because the contract executes the library code within its own context using delegatecall. To interact with the contract‚Äôs state, you must use the storage keyword for parameters representing state variables.Additionally, libraries can define custom data structures using struct. These structs can be referenced from the contract that imports the library. When a contract uses a library-defined struct, it gains access to a reusable and consistent data structure.In this case we can see a library which defines a simple struct with the data type to store the points and a method to add points to¬†it./PointsLibrary.solpragma solidity ^0.8.9;library PointsLibrary {    struct Player {        uint score;    }    function incrementScore(Player storage _player, uint points) external {        _player.score += points;    }}In this example, we call the library function with the parameter that will be modified. This parameter, which represents a storage variable, allows the library function to directly alter the contract‚Äôs state./Points.solpragma solidity ^0.8.9;import &amp;quot;./PointsLibrary.sol&amp;quot;;contract Points {    mapping(uint =&amp;gt; PointsLibrary.Player) public players;        function foo(uint _points) external {        PointsLibrary.incrementScore(players[0], _points);    }}There‚Äôs a useful tip for making library function calls shorter and more intuitive. Instead of passing the storage variable as the first parameter every time we call a library function, we can define the library‚Äôs usage using the using keyword. This keyword is followed by the library name and then the data type to which we want to attach the library functions. Here‚Äôs an example of how this¬†works:pragma solidity ^0.8.9;import &amp;quot;./PointsLibrary.sol&amp;quot;;contract Points {    using PointsLibrary for PointsLibrary.Player;    mapping(uint =&amp;gt; PointsLibrary.Player) public players;        function foo(uint _points) external {        players[0].incrementScore(_points);    }}Wrap upLibraries in Solidity are powerful tools that developers often underutilize. They facilitate the creation of reusable code, enhance contract readability, and optimize gas costs, which are crucial factors in blockchain development. Despite their potential to significantly improve code quality and reduce deployment expenses, libraries remain underappreciated in the Ethereum development community. Increasing awareness and adoption of libraries among developers could lead to more efficient, secure, and cost-effective smart contracts. This, in turn, would generate a positive impact on the entire Ethereum ecosystem, fostering innovation and elevating the quality of decentralized applications.</content>
  </entry>
  <entry>
    <title type="html">What is a Smart Contract Audit?</title>
    <published>2024-07-29T18:52:12+00:00</published>
    <updated>2024-07-29T18:52:12+00:00</updated>
    <id>https://medium.com/@coinfabrik/what-is-a-smart-contract-audit-7e328a12c5b6?source=rss-a38d3b8e1f1b------2</id>
    <link rel="alternate" type="text/html" href="https://medium.com/@coinfabrik/what-is-a-smart-contract-audit-7e328a12c5b6?source=rss-a38d3b8e1f1b------2"/>
    <author>
      <name>CoinFabrik</name>
    </author>
    <content type="html">Smart contracts have revolutionized the blockchain landscape by automating agreements and transactions without the need for intermediaries. However, with this innovation comes the need for thorough scrutiny to ensure security and reliability. In this article, we‚Äôll look at why smart contract audits matter, their main benefits, different types, and what are the skills auditors¬†need.What are Smart Contracts?Smart contracts are self-executing agreements with the terms directly written into lines of code. These contracts run on blockchain platforms like Ethereum, which ensures that they are transparent, secure, and immutable. When the predetermined conditions encoded in the smart contract are met, the contract automatically enforces and executes the agreement. This automation eliminates the need for intermediaries, reduces transaction costs, and increases efficiency.Smart contracts can handle various applications, from financial transactions and supply chain management to voting systems and real estate deals. They ensure that all parties uphold their end of the agreement, as any deviation from the pre-agreed terms renders the contract void or enforces penalties as programmed. This self-enforcing nature provides a high level of trust and reliability, making smart contracts a cornerstone of decentralized applications (dApps) and blockchain ecosystems.What Is a Smart Contract¬†Audit?A smart contract audit is a comprehensive evaluation of a smart contract‚Äôs codebase to identify any vulnerabilities, errors, or potential points of failure. Experienced auditors combine automated tools and manual inspection techniques to scrutinize every line of code. Its primary goal is to ensure that the contract operates as intended and is free from bugs or security loopholes that could be exploited by malicious actors.The audit process involves a detailed review of the contract‚Äôs logic, performance, and security. Auditors start by understanding the contract‚Äôs specifications and intended use, then use automated tools to scan for common vulnerabilities and manual reviews to catch more complex issues. Testing the contract in various scenarios ensures it behaves correctly under different conditions.Once the analysis is complete, auditors compile a detailed report outlining any issues and providing recommendations for improving the contract‚Äôs robustness. This is a key process as once smart contracts are deployed on the blockchain, flaws can have irreversible and potentially costly consequences.Importance of Smart Contract¬†AuditsSmart contract audits are vital for ensuring the security and reliability of blockchain-based applications. Since smart contracts are immutable once deployed, any bugs or vulnerabilities can lead to significant financial losses and harm the project‚Äôs reputation.Audits help to identify and fix these issues before they can be exploited by malicious actors. They also foster trust among users and investors by showing a commitment to security and due diligence. An audited contract signals that the developers have taken steps to ensure the contract‚Äôs safety and functionality.Overall, smart contract audits protect user assets, maintain trust, and support the long-term success of blockchain projects.Benefits of Smart Contract¬†AuditsSmart contract audits improve the security, functionality, and trustworthiness of blockchain applications, making them essential for building robust and secure projects.One of the primary advantages is the identification and mitigation of security vulnerabilities that help prevent financial losses, uncovering and addressing potential exploits before deployment.Additionally, audits improve the overall functionality of smart contracts by identifying logic errors and inefficiencies, ensuring that the contract performs as intended under various conditions. This leads to more reliable and efficient applications.Another significant benefit is the increased confidence among users and investors. An audited contract signifies that the developers have taken the necessary steps to ensure its security and reliability, which can attract more users and investors to the¬†project.Types of Smart Contract¬†AuditsThere are several types of smart contract audits, each offering different levels of scrutiny and methods for identifying vulnerabilities.Manual audits involve experienced auditors reviewing the code line-by-line to detect subtle flaws and logic errors that automated tools might miss. This method is thorough and can uncover complex issues, but it is time-consuming and relies heavily on the auditor‚Äôs expertise.Automated audits use specialized software to scan the code for common vulnerabilities, such as reentrancy attacks, integer overflows, and underflows. These tools are efficient and can quickly identify well-known issues, but they may miss more intricate problems.Formal verification is a mathematical approach that proves the correctness of the contract‚Äôs logic against its specifications. This method provides a high level of assurance but is often complex and requires specialized knowledge.Hybrid audits combine both manual and automated techniques to provide a comprehensive analysis, leveraging the strengths of both methods to ensure the contract‚Äôs security and functionality.Each type of audit has its advantages, and often, a combination of these methods is used to achieve the most thorough¬†review.Smart Contract Audit Process (Pre/Execution/Post)The smart contract audit process typically involves three stages: pre-audit, execution, and post-audit.In the pre-audit stage, auditors gather information about the contract‚Äôs purpose, architecture, and specifications. This involves understanding the intended functionality, the environment in which it will operate, and any dependencies it may have. This stage also includes setting the scope of the audit and identifying key areas of¬†concern.The execution stage is where the actual audit takes place. Auditors use a combination of automated tools and manual reviews to analyze the contract‚Äôs code. They look for security vulnerabilities, logic errors, and performance issues. This stage may also involve running simulations and tests to see how the contract behaves under various conditions. In the post-audit stage, auditors compile their findings into a detailed report, highlighting any issues discovered and providing recommendations for remediation.The developers then address these issues and may request a re-audit to ensure that all vulnerabilities have been resolved. This iterative process helps ensure the contract‚Äôs security and reliability before deployment.Technical Skills for Smart Contract¬†AuditorsSmart contract auditors require a blend of technical skills and blockchain-specific knowledge. Proficiency in programming languages like Solidity -which is commonly used for Ethereum smart contracts-, or Rust -which focuses on security, efficiency, and reliability in blockchain applications and smart contracts- is essential.Auditors must understand the specifics of smart contract development and be able to read and analyze complex code. Knowledge of blockchain architecture and cryptographic principles is also crucial, as auditors need to understand how smart contracts interact with the blockchain and the security implications of these interactions.Familiarity with automated auditing tools and frameworks is important for efficiently identifying common vulnerabilities.Analytical and problem-solving skills are vital for identifying and addressing subtle bugs and security¬†flaws.Effective communication skills are also necessary, as auditors must clearly document their findings and provide actionable recommendations to developers. Overall, a smart contract auditor‚Äôs skill set combines deep technical expertise with a thorough understanding of blockchain technology.What are the costs of a Smart Contract¬†Audit?The cost of a smart contract audit can vary widely depending on several factors, including the complexity of the contract, the reputation of the auditing firm, and the scope of the¬†audit.For a basic audit of a relatively simple smart contract, prices might start at a few thousand dollars. However, for more complex contracts or those requiring formal verification, costs can escalate to tens of thousands of dollars. Reputable firms with extensive experience and a proven track record tend to charge higher fees, reflecting the quality and thoroughness of their services.The scope of the audit, including the depth of analysis and the use of automated tools versus manual reviews, also impacts the cost. While the expense may seem high, investing in a comprehensive audit is justified by the enhanced security and trust it¬†brings.Preventing a single exploit or failure can save significantly more in potential losses and reputational damage, making smart contract audits a critical investment for any blockchain project.ConclusionSmart contract audits are a fundamental aspect of blockchain security, ensuring that these automated agreements function safely and effectively. By understanding the audit process, the skills required, and the benefits, stakeholders can make informed decisions to protect their investments and uphold the integrity of the blockchain ecosystem.As blockchain tech keeps advancing, rigorous smart contract audits are becoming increasingly more important. Smart contract audits enhance security, foster trust among users and investors, and contribute to the long-term success and adoption of blockchain applications</content>
  </entry>
  <entry>
    <title type="html">ATHR: Descriptive Statistics for Crypto Asset Rankings</title>
    <published>2024-07-19T14:39:04+00:00</published>
    <updated>2024-07-19T14:39:04+00:00</updated>
    <id>https://medium.com/@coinfabrik/athr-descriptive-statistics-for-crypto-asset-rankings-6c617edea77d?source=rss-a38d3b8e1f1b------2</id>
    <link rel="alternate" type="text/html" href="https://medium.com/@coinfabrik/athr-descriptive-statistics-for-crypto-asset-rankings-6c617edea77d?source=rss-a38d3b8e1f1b------2"/>
    <author>
      <name>CoinFabrik</name>
    </author>
    <content type="html">We present a crypto all-time high ranking: an original approach to evaluating crypto assets by analyzing their ranking movements instead of their individual values to better capture their highly interrelated nature.Several sport rankings use this approach. For example, you can see the career high rank and historical movements of tennis players such as Diego Schwartzman and Novak Djokovic. We use ATHR for All-Time High¬†Ranking.Stock investors are used to descriptive statistics values including market capitalization, price-to-earnings, record highs among others. Investing in crypto is different and investors are used to values such as all-time-high (ATH) and all-time-low (ATL) for every crypto asset. The main sites for looking into these values are CoinMarketCap and CoinGecko. Both of them provide historical data for rankings, prices, volume, and supply but don‚Äôt provide descriptive values based on rankings. Providing this information makes perfect sense because crypto assets are interrelated. The main observable pattern is Bitcoin, and you can clearly see that when Bitcoin goes up and down significantly it impacts other assets down in the ranking. Again, this is why a ranking analysis makes total sense, because beyond the price, it is important to get hypotheses about how assets can go up and down in the rankings beyond a statistical part of the price that will move in tandem with other crypto¬†assets.What follows is a chart with 1,939 assets, based on weekly historical data from CoinMarketCap Cryptocurrency Historical Data Snapshot. It is important to note that while the information has a weekly precision, it continues to capture significant information about ranking movements. It is also important to highlight that we analyzed the top 200 crypto asset ranking snapshots, thus, leaving aside information below that threshold. Again, this doesn‚Äôt neglect the main point of this article, which is focusing on ranking information, and other investors and researchers can contribute with more insights.</content>
  </entry>
  <entry>
    <title type="html">How-to create a Solana Meme Coin &amp; NOT accidentally burn it</title>
    <published>2024-07-02T12:56:35+00:00</published>
    <updated>2024-07-02T12:56:35+00:00</updated>
    <id>https://medium.com/@coinfabrik/how-to-create-a-solana-meme-coin-not-accidentally-burn-it-bdd62db07aa7?source=rss-a38d3b8e1f1b------2</id>
    <link rel="alternate" type="text/html" href="https://medium.com/@coinfabrik/how-to-create-a-solana-meme-coin-not-accidentally-burn-it-bdd62db07aa7?source=rss-a38d3b8e1f1b------2"/>
    <author>
      <name>CoinFabrik</name>
    </author>
    <content type="html">Some contextIn the past few weeks Solana meme coins, a type of cryptocurrency that typically has no utility beyond being a lighthearted joke, have taken center stage in the crypto world. Success cases like the Book of Meme (BOME), with a market capitalization that went from zero to 1.6 billion, empowered this tendency. Presales have become popular, allowing projects to raise significant amounts of money even before having a working¬†product.Following this trend, many ‚Äúeasy-to-use‚Äù web tools offer the possibility to create, edit and burn Solana tokens to anyone with limited or even no coding expertise, often charging a small amount of SOLs to get the job done. Unfortunately, sometimes conducting backdoor¬†scams.SLERF, the sloth-themed meme coin built on Solana that raised an impressive $10 million in SOL during its presale, was created and managed with those resources. Following the creator field on its metadata, we can see the watermark of the web tool used to issue the¬†token.The SLERF dev also created a SOL/SLERF LP pool on Raydium, providing liquidity with the total amount of SOL received during the presale and half of the token‚Äôs supply, getting 5,171,020 of LP tokens that were supposed to be distributed among its early supporters.On March 18th 2024, the SLERF dev annonunced on X that he ‚Äúfucked up‚Äù, by accidentally burning ‚Äúthe LP and the tokens that were set aside from the airdrop‚Äù. The massive fail occurred when he first tried to burn some worthless coins sent to the presale wallet using the web tool solana-tools with no success, and then tried again with sol-incinerator. Apparently, he also accidentally listed the wrong token accounts.(As a side note, he was trying to retrieve the rent lamports from the unwanted token accounts associated with the presale wallet, which is normal practice on Solana. More on this in the Solana Basics section).You can take a look at the transactions where these actions took¬†place:unwanted coins¬†burningLP tokens¬†burningParadoxically, it seems that the event pushed up the asset price, but since this article does not intend to provide investment advice, but rather technical advice, let‚Äôs get to¬†work.Solana BasicsThis section is a heads up about Solana‚Äôs basic concepts. If you are experienced enough, please feel free to skip¬†it.Solana Tokens: Unlike Ethereum, where each token corresponds to a different Smart Contract, on Solana each token is an entity issued by a single program, called the SPL-TokenProgram (On Solana, Smart Contracts are called just programs). To create a token, you have to execute one of its functions, which results in the creation of a¬†Mint.Mint: A Mint represents the global state of a token. In a not-so-close analogy, you can think of it as a ‚Äúmoney printer‚Äù. It contains essential information such as the supply, decimals, and mint and freeze authorities. These authorities are addresses (‚Äúusers‚Äù) with specific roles: the power to create (or in Solana‚Äôs terminology, to mint) new tokens and, if necessary, the ability to freeze holding accounts as a security¬†measure.Token Accounts: Unlike Ethereum, where a single user address can be associated with token balances across different Smart Contracts, on Solana users need to have separate Token Accounts for each new token they want to receive. You can think of these accounts as ‚Äúbags‚Äù for each different type of coin. Fortunately, there are mechanisms in place to associate token accounts with a user address, so from an end-user perspective, you don‚Äôt have to worry about¬†this.Rent: When creating any programming entity on Solana, such as Mints or Token Accounts, a small quantity of lamports is required as memory rent. Transaction fees include this cost. Once an entity is no longer needed, it can be closed to retrieve the rent lamports and free the¬†memory.(By the way, every entity in Solana is called an account. Entity will be our preferred term throughout this tutorial, as it avoids confusions)Token Decimals: In the context of blockchains, working with large integers is common for handling monetary values. Computationally, integers provide greater precision than decimal numbers. A Mint‚Äôs decimals field determines how many decimal places are used for representing fractional amounts of the token. (For example, 1 token with 9 decimals has an internal value of 1,000,000,000).Token-2022: Recently a new token program called Token-2022 has been deployed. It natively adds, on demand, more functionality to Mints created with it, such as confidential transfers, transfer fees, metadata, and more. Before Token-2022, adding metadata to a token was a complicated process, so to ease the learning process, we will be using the new standard.The throwback is that DeXes are slowly evolving to be Token-2022 compatible, so not all of them will be immediately capable of displaying your Meme Coin image. Nevertheless, there are already Dexes working with these tokens, and Token-2022 is backwards compatible, so even if a DeX can‚Äôt process the metadata, it can list the token¬†anyway.Authority revoking: Token authorities, once set to None, are considered revoked. For instance, if a mint authority is revoked, there‚Äôs no way to issue new tokens. This practice is commonly employed when creating Meme Coins, serving as a means to instill confidence among supporters.How To Create A Solana Meme Coin¬†‚öíÔ∏èWe will be working on the Solana Devnet environment, paying TX fees with fake SOL. Feel free to experiment.Check every address twice before executing any command on a mainnet environment. Remember to NEVER share your private keys, since they control your¬†assets.Pre RequisitesSolana CLI works better on Linux/Mac. For Windows systems, you can use¬†WSLInstall the Phantom wallet extension for¬†ChromeInstall the Solana¬†CLIBefore StartOpen a terminal (If on Windows, a WSL terminal)Create a new folder: $ mkdir¬†memecoinGet into the project folder: $ cd¬†memecoinCreate a Wallet with: $ solana-keygen newThis will create a wallet at the default solana installation path ~/.config/solana/id.json (a.k.a ‚Äúsystem wallet‚Äú). You‚Äôll be using it to sign and pay transactions.Tip: When prompted for a passphrase, just press enter to skip, since we are working with disposable test accounts.Target your Chrome Phantom Wallet to¬†Devnet:Settings -&amp;gt; Developer Settings -&amp;gt; Testnet Mode On -&amp;gt; Choose `Solana¬†Devnet`Log your system wallet private key. If the Solana CLI was installed at the default location, type: $ cat ~/.config/solana/id.jsonTip: Carefully copy the private key, including the brackets.Import your wallet on¬†Phantom:Add / Connect Wallet -&amp;gt; Import Private Key -&amp;gt; Paste your private¬†keyEnter the account name and press¬†createTip: If you see the error Bad Format when pasting your private key, try deleting the last char after pasting and typing ]¬†again.Fund your wallet with Devnet fake SOL from a¬†faucet:go to https://faucet.solana.com/Copy your system wallet address by clicking on the account name on the Phantom wallet extension.Target devnet, paste your address, and ask for 5¬†SOL.After a couple of seconds, you should be able to see the 5 fake SOL in your¬†wallet.At this point, you have your working environment up and¬†running.A Token Is Born¬†‚≠êTip: For every command of the Solana CLI, you can append `‚Äìhelp` or just `-h` to see the full list of available options.You‚Äôll get different outputs for `spl-token ‚Äìhelp` or `spl-token create-token ‚Äìhelp`. Feel free to experiment.Token‚Äôs MetadataEssentially, a Meme Coin is a regular token with an associated image. In Token-2022 Mints (The Token Program that we will use throughout this tutorial) provide a metadata field on the token itself which points to a¬†.json file that in turn points to the¬†image.Mint metadata -&amp;gt; json file -&amp;gt;¬†imageUpload your Meme Coin image. You can use any public hosting service. (However, in a real mainnet scenario, we recommend using IPFS, which ensures that your asset image will always be accessible).Tip: You can host your assets on your Google Drive¬†account:Upload your file to your google drive¬†account.Set the Share status to ‚ÄúAnyone with the¬†link‚ÄúTransform the default share link using this¬†toolCreate the json file: $ touch metadata.jsonOpen your just created metadata.json file from your favorite text editor, and paste the following, filled with your¬†data:{    &amp;quot;name&amp;quot;: &amp;quot;&amp;lt;TOKEN_NAME&amp;gt;&amp;quot;,    &amp;quot;symbol&amp;quot;: &amp;quot;&amp;lt;TOKEN_SYMBOL&amp;gt;&amp;quot;,    &amp;quot;image&amp;quot;: &amp;quot;&amp;lt;TOKEN_IMAGE_URI&amp;gt;&amp;quot;}On the &amp;lt;TOKEN_IMAGE_URI&amp;gt; placeholder, paste your image¬†URLTip: When replacing angle brackets placeholders such as &amp;lt;TOKEN_NAME&amp;gt;, data must be passed without the brackets (i.e.,¬†MyToken)Tip: There are more available fields on the json metadata standard that you can use to fit your¬†needs.Upload also your metadata.json file. Store the file URL, we will need it¬†soon.Mint, Token Account, Initial Supply, Revoke,¬†TransferCreate a Mint: $ spl-token create-token --enable-metadata --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb --url¬†devnetNotice that the transaction was automatically signed and paid by your system¬†wallet.TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb is the address of the Token-2022 program.Defaults: decimals: 9, mint authority: system wallet, freeze authority: None, initial supply:¬†0.‚Äìurl devnet indicates to target¬†Devnet.Display Mint Info: $ spl-token display &amp;lt;MINT_ADDRESS&amp;gt; -u¬†d-u d is the abbreviated form of ‚Äìurl¬†devnetAdd the Token Metadata: $ spl-token initialize-metadata &amp;lt;MINT_ADDRESS&amp;gt; &amp;lt;TOKEN_NAME&amp;gt; &amp;lt;TOKEN_SYMBOL&amp;gt; &amp;lt;TOKEN_URI&amp;gt; -u¬†dFor &amp;lt;TOKEN_URI&amp;gt;, you have to pass the URL from your uploaded metadata.json file.Create a Token Account: $ spl-token create-account &amp;lt;MINT_ADDRESS&amp;gt; -p TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb -u¬†dBy default, the authority (ownership) of the Token Account is given to the system¬†wallet.Display Token Account info: $ spl-token display &amp;lt;TOKEN_ACCOUNT_ADDRESS&amp;gt; -u¬†dMint the initial supply: $ spl-token mint &amp;lt;MINT_ADDRESS&amp;gt; &amp;lt;AMOUNT&amp;gt; &amp;lt;RECIPIENT_ADDRESS&amp;gt; -u¬†d&amp;lt;RECIPIENT_ADDRESS&amp;gt; should be your just created Token¬†Account.Notice that you are able to mint tokens since you are the mint authority of the new¬†token.The amount should be passed without decimals (i.e. to 100 mint 100 tokens, which internally will be represented as 100,000,000,000)Optionally, display both Mint and Token Account info again to take a look at the updated balances and¬†supply.Tip: At this point, you should be able to see the token in your phantom wallet, its image, and the updated balances.Now, since we want to build trust upon our early supporters, let‚Äôs prevent any more tokens to be minted in the¬†future.Revoke mint authority: $ spl-token authorize &amp;lt;MINT_ADDRESS&amp;gt; --disable mint -u¬†dOptionally, try to mint some more tokens to check that the mint authority has successfully been¬†revoked.Let‚Äôs transfer some tokens, mimicking a token distribution event. To do so, we‚Äôll need another system wallet, and its associated token¬†account:To create another filesystem wallet: $ solana-keygen new --outfile¬†./another-keypair.jsonThe command will create a¬†.json file at the specified path.Grab the created keypair‚Äôs Pubkey: $ solana-keygen pubkey¬†./another-keypair.jsonFund the new account with 1 SOL with the solana¬†faucetTransfer some amount: $ spl-token transfer &amp;lt;MINT_ADDRESS&amp;gt; &amp;lt;AMOUNT&amp;gt; &amp;lt;RECIPIENT&amp;gt; -u d --allow-unfunded-recipient --fund-recipientFor &amp;lt;RECIPIENT&amp;gt;, pass the pubkey of the account created on the previous step. spl-token transfer will automatically create an associated token¬†account.Notice that although the authority of the new token account is the keypair from another-keypair.json, the system wallet is paying the rent for the new entity, included in the cost of the transaction.Bonus: Burn &amp;amp; Close a Token¬†AccountLet‚Äôs suppose that the user that just received the tokens doesn‚Äôt really want them. So, it‚Äôs an opportunity to get those lamports from the unwanted token Token Account‚Äôs memory¬†rent.In order to close a token account, its balance must be zero. You can transfer all to somebody else or, like we are going to do, just burn the¬†total.Check the another-keypair wallet‚Äôs SOL balance: $ solana account &amp;lt;WALLET_ADDRESS&amp;gt; --lamports -u¬†dFor &amp;lt;WALLET_ADDRESS&amp;gt; pass the another-keypair.json public¬†key.Burn: $ spl-token burn &amp;lt;TOKEN_ACCOUNT&amp;gt; &amp;lt;AMOUNT&amp;gt; -u d --owner¬†./another-keypair.json --fee-payer ~/.config/solana/id.jsonFor &amp;lt;AMOUNT&amp;gt;, pass the total balance of the token account you want to¬†burn.Notice that the transaction fees are paid by the system wallet, just to make it easy to see the retrieved lamports on the new account‚Äôs balance.Close the account: $ spl-token close --address &amp;lt;TOKEN_ACCOUNT&amp;gt; --owner¬†./another-keypair.json --fee-payer ~/.config/solana/id.json --recipient &amp;lt;WALLET_ADDRESS&amp;gt; -u¬†dRepeat step 1 to check the wallet‚Äôs SOL balance¬†again.Tip: It is possible to burn several unwanted token accounts in bulk to avoid the base fee of each transaction. However we recommend not to do so, even with supposedly easy to use web tools. You don‚Äôt want the¬†pain.ConclusionsAs you have seen, the process of creating a Meme Coin, even for newcomers, shouldn‚Äôt be exposed to untrusted tools.Once you feel comfortable, you can target the Solana mainnet-beta cluster to launch your Meme Coin. Naturally, you‚Äôll need real SOL and a business plan (or at least a good meme!), but aside from transaction fees, you won‚Äôt be charged a dime, and your journey should be free from avoidable hiccups.</content>
  </entry>
</feed>
